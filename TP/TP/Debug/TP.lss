
TP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000b2e  00000bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010e  0080010e  00000bd0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180f  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b94  00000000  00000000  00002637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbf  00000000  00000000  000031cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00003f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071d  00000000  00000000  000043a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fff  00000000  00000000  00004ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005ac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_11>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ee e2       	ldi	r30, 0x2E	; 46
  bc:	fb e0       	ldi	r31, 0x0B	; 11
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ae 30       	cpi	r26, 0x0E	; 14
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	ae e0       	ldi	r26, 0x0E	; 14
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a6 31       	cpi	r26, 0x16	; 22
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  de:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_Init>:

#include "ADC.h"

void ADC_Init(){
	//inicializa el ADC
	ADMUX=0x00; //Vref -> AREF = 5V , Right justified, pin ADC0
  e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //Enable ADC w/ prescaler 128
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC0D); //para que consuma menos el MCU deshabilitamos el Digital Input del puerto
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  f6:	08 95       	ret

000000f8 <ADC_GetData>:
	//Convierte la entrada del pin ADC0 y la pasa al registro
	//retorna el valor del registro
	//con este valor, el sensortemp calcula el voltaje
	//y luego la temperatura
	
	ADCSRA |= (1<<ADSC); //Inicializo conversion
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	while(((ADCSRA & (1<<ADIF)) == 0)); //se bloquea hasta que termina la conversión
 102:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 106:	84 ff       	sbrs	r24, 4
 108:	fc cf       	rjmp	.-8      	; 0x102 <ADC_GetData+0xa>
	//to-do? timeout para evitar bloqueo?
	ADCSRA |= (1<<ADIF); //borra flag (debe borrarse si se usa polling)
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 61       	ori	r24, 0x10	; 16
 112:	80 83       	st	Z, r24
	
	return ADC; //retorno el valor obtenido en mi ADC	
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11c:	08 95       	ret

0000011e <CALEFACTOR_Init>:
#include "Calefactor.h"


void CALEFACTOR_Init(){
	//setea pin pb1 como escritura
	DDRB |= (1<<PORTB1);
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	82 60       	ori	r24, 0x02	; 2
 122:	84 b9       	out	0x04, r24	; 4
 124:	08 95       	ret

00000126 <CALEFACTOR_TurnOff>:
}

void CALEFACTOR_TurnOff(){
	//apaga el led conecatdo a pb1
	PORTB &= ~(1<<PORTB1);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	08 95       	ret

0000012e <CALEFACTOR_TurnOn>:
}

void CALEFACTOR_TurnOn(){
	PORTB |= (1<<PORTB1);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	82 60       	ori	r24, 0x02	; 2
 132:	85 b9       	out	0x05, r24	; 5
 134:	08 95       	ret

00000136 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 136:	98 2f       	mov	r25, r24
 138:	90 7f       	andi	r25, 0xF0	; 240
 13a:	9b b9       	out	0x0b, r25	; 11
 13c:	9b b1       	in	r25, 0x0b	; 11
 13e:	91 60       	ori	r25, 0x01	; 1
 140:	9b b9       	out	0x0b, r25	; 11
 142:	9b b1       	in	r25, 0x0b	; 11
 144:	94 60       	ori	r25, 0x04	; 4
 146:	9b b9       	out	0x0b, r25	; 11
 148:	25 ed       	ldi	r18, 0xD5	; 213
 14a:	2a 95       	dec	r18
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDsendChar+0x14>
 14e:	00 00       	nop
 150:	9b b1       	in	r25, 0x0b	; 11
 152:	9b 7f       	andi	r25, 0xFB	; 251
 154:	9b b9       	out	0x0b, r25	; 11
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	9e 7f       	andi	r25, 0xFE	; 254
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	95 ed       	ldi	r25, 0xD5	; 213
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDsendChar+0x28>
 162:	00 00       	nop
 164:	20 e1       	ldi	r18, 0x10	; 16
 166:	82 9f       	mul	r24, r18
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	81 60       	ori	r24, 0x01	; 1
 172:	8b b9       	out	0x0b, r24	; 11
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	84 60       	ori	r24, 0x04	; 4
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	85 ed       	ldi	r24, 0xD5	; 213
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDsendChar+0x46>
 180:	00 00       	nop
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	8b b9       	out	0x0b, r24	; 11
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	95 ed       	ldi	r25, 0xD5	; 213
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDsendChar+0x5a>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <LCDsendCommand>:
 198:	98 2f       	mov	r25, r24
 19a:	90 7f       	andi	r25, 0xF0	; 240
 19c:	9b b9       	out	0x0b, r25	; 11
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	94 60       	ori	r25, 0x04	; 4
 1a2:	9b b9       	out	0x0b, r25	; 11
 1a4:	ef e9       	ldi	r30, 0x9F	; 159
 1a6:	ff e0       	ldi	r31, 0x0F	; 15
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDsendCommand+0x10>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCDsendCommand+0x16>
 1ae:	00 00       	nop
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	9b 7f       	andi	r25, 0xFB	; 251
 1b4:	9b b9       	out	0x0b, r25	; 11
 1b6:	ef e9       	ldi	r30, 0x9F	; 159
 1b8:	ff e0       	ldi	r31, 0x0F	; 15
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDsendCommand+0x22>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCDsendCommand+0x28>
 1c0:	00 00       	nop
 1c2:	f0 e1       	ldi	r31, 0x10	; 16
 1c4:	8f 9f       	mul	r24, r31
 1c6:	c0 01       	movw	r24, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDsendCommand+0x3e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCDsendCommand+0x44>
 1dc:	00 00       	nop
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	ef e9       	ldi	r30, 0x9F	; 159
 1e6:	ff e0       	ldi	r31, 0x0F	; 15
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDsendCommand+0x50>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCDsendCommand+0x56>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
 1f8:	08 95       	ret

000001fa <LCDstring>:
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	69 f0       	breq	.+26     	; 0x220 <LCDstring+0x26>
 206:	d6 2f       	mov	r29, r22
 208:	8c 01       	movw	r16, r24
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	07 c0       	rjmp	.+14     	; 0x21c <LCDstring+0x22>
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	f1 1d       	adc	r31, r1
 214:	80 81       	ld	r24, Z
 216:	0e 94 9b 00 	call	0x136	; 0x136 <LCDsendChar>
 21a:	cf 5f       	subi	r28, 0xFF	; 255
 21c:	cd 17       	cp	r28, r29
 21e:	b8 f3       	brcs	.-18     	; 0x20e <LCDstring+0x14>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <LCDGotoXY>:
 22a:	62 30       	cpi	r22, 0x02	; 2
 22c:	31 f0       	breq	.+12     	; 0x23a <LCDGotoXY+0x10>
 22e:	63 30       	cpi	r22, 0x03	; 3
 230:	31 f0       	breq	.+12     	; 0x23e <LCDGotoXY+0x14>
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	29 f4       	brne	.+10     	; 0x240 <LCDGotoXY+0x16>
 236:	80 5c       	subi	r24, 0xC0	; 192
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCDGotoXY+0x16>
 23a:	8c 5e       	subi	r24, 0xEC	; 236
 23c:	01 c0       	rjmp	.+2      	; 0x240 <LCDGotoXY+0x16>
 23e:	8c 5a       	subi	r24, 0xAC	; 172
 240:	80 68       	ori	r24, 0x80	; 128
 242:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
 246:	08 95       	ret

00000248 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 256:	86 2f       	mov	r24, r22
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	0d c0       	rjmp	.+26     	; 0x288 <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 26e:	f7 01       	movw	r30, r14
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 276:	01 e0       	ldi	r16, 0x01	; 1
 278:	08 0f       	add	r16, r24
 27a:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
		LCDsendChar(pcc);
 27e:	81 2f       	mov	r24, r17
 280:	0e 94 9b 00 	call	0x136	; 0x136 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 284:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 286:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 288:	c8 30       	cpi	r28, 0x08	; 8
 28a:	d1 05       	cpc	r29, r1
 28c:	80 f3       	brcs	.-32     	; 0x26e <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	08 95       	ret

0000029c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	8f e5       	ldi	r24, 0x5F	; 95
 2a2:	9a ee       	ldi	r25, 0xEA	; 234
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCDinit+0x8>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCDinit+0xe>
 2aa:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2ac:	1b b8       	out	0x0b, r1	; 11
	LCP=0x00;
 2ae:	1b b8       	out	0x0b, r1	; 11
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	80 6f       	ori	r24, 0xF0	; 240
 2b4:	8a b9       	out	0x0a, r24	; 10
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2b6:	8a b1       	in	r24, 0x0a	; 10
 2b8:	87 60       	ori	r24, 0x07	; 7
 2ba:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2bc:	90 e3       	ldi	r25, 0x30	; 48
 2be:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2c0:	8b b1       	in	r24, 0x0b	; 11
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	8b b9       	out	0x0b, r24	; 11
 2c6:	ef e9       	ldi	r30, 0x9F	; 159
 2c8:	ff e0       	ldi	r31, 0x0F	; 15
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCDinit+0x2e>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCDinit+0x34>
 2d0:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	8b 7f       	andi	r24, 0xFB	; 251
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	ef e9       	ldi	r30, 0x9F	; 159
 2da:	ff e0       	ldi	r31, 0x0F	; 15
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCDinit+0x40>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCDinit+0x46>
 2e2:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2e4:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	8b b9       	out	0x0b, r24	; 11
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDinit+0x54>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCDinit+0x5a>
 2f6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2f8:	8b b1       	in	r24, 0x0b	; 11
 2fa:	8b 7f       	andi	r24, 0xFB	; 251
 2fc:	8b b9       	out	0x0b, r24	; 11
 2fe:	ef e9       	ldi	r30, 0x9F	; 159
 300:	ff e0       	ldi	r31, 0x0F	; 15
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCDinit+0x66>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCDinit+0x6c>
 308:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	84 60       	ori	r24, 0x04	; 4
 312:	8b b9       	out	0x0b, r24	; 11
 314:	8f e9       	ldi	r24, 0x9F	; 159
 316:	9f e0       	ldi	r25, 0x0F	; 15
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDinit+0x7c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCDinit+0x82>
 31e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8b 7f       	andi	r24, 0xFB	; 251
 324:	8b b9       	out	0x0b, r24	; 11
 326:	ef e9       	ldi	r30, 0x9F	; 159
 328:	ff e0       	ldi	r31, 0x0F	; 15
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCDinit+0x8e>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCDinit+0x94>
 330:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 332:	88 e2       	ldi	r24, 0x28	; 40
 334:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 342:	0a c0       	rjmp	.+20     	; 0x358 <LCDinit+0xbc>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 344:	d1 e0       	ldi	r29, 0x01	; 1
 346:	d6 0f       	add	r29, r22
 348:	8c 2f       	mov	r24, r28
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	88 59       	subi	r24, 0x98	; 152
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	0e 94 24 01 	call	0x248	; 0x248 <LCDdefinechar>
		ch=ch+8;
 354:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 356:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 358:	c0 34       	cpi	r28, 0x40	; 64
 35a:	a0 f3       	brcs	.-24     	; 0x344 <LCDinit+0xa8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <main>:
#include "main.h"


int main(void)
{
	LCDinit();
 362:	0e 94 4e 01 	call	0x29c	; 0x29c <LCDinit>
    SEOS_Init();
 366:	0e 94 3b 02 	call	0x476	; 0x476 <SEOS_Init>
	VENTILADOR_Init();
 36a:	0e 94 43 03 	call	0x686	; 0x686 <VENTILADOR_Init>
	CALEFACTOR_Init();
 36e:	0e 94 8f 00 	call	0x11e	; 0x11e <CALEFACTOR_Init>
	SENSORTEMP_Init();
 372:	0e 94 c1 01 	call	0x382	; 0x382 <SENSORTEMP_Init>
	SYSTEM_Init();
 376:	0e 94 e7 02 	call	0x5ce	; 0x5ce <SYSTEM_Init>
	sei();
 37a:	78 94       	sei
    while (1)
    {
		SEOS_Dispatch_Tasks();
 37c:	0e 94 4c 02 	call	0x498	; 0x498 <SEOS_Dispatch_Tasks>
 380:	fd cf       	rjmp	.-6      	; 0x37c <main+0x1a>

00000382 <SENSORTEMP_Init>:




void SENSORTEMP_Init(){
	ADC_Init();
 382:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_Init>
 386:	08 95       	ret

00000388 <SENSORTEMP_MeasureTemp>:
}


tempType SENSORTEMP_MeasureTemp(){
 388:	4f 92       	push	r4
 38a:	5f 92       	push	r5
 38c:	6f 92       	push	r6
 38e:	7f 92       	push	r7
 390:	8f 92       	push	r8
 392:	9f 92       	push	r9
 394:	af 92       	push	r10
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
	//lo pasa a mV
	//calcula la Temperatura en °C
	//retorna el resultado en tempType
	tempType temperature;
	
	unsigned long aux = ADC_GetData();
 3a0:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADC_GetData>
	temperature = (tempType)aux * ADC_FACTOR; //consigo el voltaje de salida en mV
 3a4:	bc 01       	movw	r22, r24
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e4       	ldi	r19, 0x40	; 64
 3b2:	4c e9       	ldi	r20, 0x9C	; 156
 3b4:	55 e4       	ldi	r21, 0x45	; 69
 3b6:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulsf3>
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e8       	ldi	r20, 0x80	; 128
 3c0:	5a e3       	ldi	r21, 0x3A	; 58
 3c2:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulsf3>
	//equivalente a hacer (aux*5000UL)/1024
	temperature = temperature/SENSORTEMP_FACTOR; //consigo el valor de la temperatura
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e2       	ldi	r20, 0x20	; 32
 3cc:	51 e4       	ldi	r21, 0x41	; 65
 3ce:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
 3d2:	2b 01       	movw	r4, r22
 3d4:	3c 01       	movw	r6, r24
	
	//Como la resulución es de 0.5°C (aprox) fuerzo el incremento de temperatura a 0.5
	//((solo si trabajo con floats))
	
	#ifdef USING_FLOAT
		aux=temperature;
 3d6:	0e 94 33 04 	call	0x866	; 0x866 <__fixunssfsi>
 3da:	4b 01       	movw	r8, r22
 3dc:	5c 01       	movw	r10, r24
		temperature = ((temperature-aux>0.33 && temperature-aux<0.66) ? aux+0.5 : (temperature-aux>0.66) ? aux+1:aux);
 3de:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
 3e2:	6b 01       	movw	r12, r22
 3e4:	7c 01       	movw	r14, r24
 3e6:	9b 01       	movw	r18, r22
 3e8:	ac 01       	movw	r20, r24
 3ea:	c3 01       	movw	r24, r6
 3ec:	b2 01       	movw	r22, r4
 3ee:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
 3f2:	2b 01       	movw	r4, r22
 3f4:	3c 01       	movw	r6, r24
 3f6:	23 ec       	ldi	r18, 0xC3	; 195
 3f8:	35 ef       	ldi	r19, 0xF5	; 245
 3fa:	48 ea       	ldi	r20, 0xA8	; 168
 3fc:	5e e3       	ldi	r21, 0x3E	; 62
 3fe:	0e 94 14 05 	call	0xa28	; 0xa28 <__gesf2>
 402:	18 16       	cp	r1, r24
 404:	ac f4       	brge	.+42     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 406:	23 ec       	ldi	r18, 0xC3	; 195
 408:	35 ef       	ldi	r19, 0xF5	; 245
 40a:	48 e2       	ldi	r20, 0x28	; 40
 40c:	5f e3       	ldi	r21, 0x3F	; 63
 40e:	c3 01       	movw	r24, r6
 410:	b2 01       	movw	r22, r4
 412:	0e 94 bc 03 	call	0x778	; 0x778 <__cmpsf2>
 416:	88 23       	and	r24, r24
 418:	5c f4       	brge	.+22     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	5f e3       	ldi	r21, 0x3F	; 63
 422:	c7 01       	movw	r24, r14
 424:	b6 01       	movw	r22, r12
 426:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__addsf3>
 42a:	6b 01       	movw	r12, r22
 42c:	7c 01       	movw	r14, r24
 42e:	14 c0       	rjmp	.+40     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 430:	23 ec       	ldi	r18, 0xC3	; 195
 432:	35 ef       	ldi	r19, 0xF5	; 245
 434:	48 e2       	ldi	r20, 0x28	; 40
 436:	5f e3       	ldi	r21, 0x3F	; 63
 438:	c3 01       	movw	r24, r6
 43a:	b2 01       	movw	r22, r4
 43c:	0e 94 14 05 	call	0xa28	; 0xa28 <__gesf2>
 440:	18 16       	cp	r1, r24
 442:	54 f4       	brge	.+20     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 444:	c5 01       	movw	r24, r10
 446:	b4 01       	movw	r22, r8
 448:	6f 5f       	subi	r22, 0xFF	; 255
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	8f 4f       	sbci	r24, 0xFF	; 255
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
 454:	6b 01       	movw	r12, r22
 456:	7c 01       	movw	r14, r24
	#endif
	
	return temperature;
 458:	c7 01       	movw	r24, r14
 45a:	b6 01       	movw	r22, r12
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	bf 90       	pop	r11
 466:	af 90       	pop	r10
 468:	9f 90       	pop	r9
 46a:	8f 90       	pop	r8
 46c:	7f 90       	pop	r7
 46e:	6f 90       	pop	r6
 470:	5f 90       	pop	r5
 472:	4f 90       	pop	r4
 474:	08 95       	ret

00000476 <SEOS_Init>:
static unsigned char iCont=0;


void SEOS_Init(){
	//configuro Timer1 para interrupciones cada 100ms	
	OCR1A = 6249;
 476:	89 e6       	ldi	r24, 0x69	; 105
 478:	98 e1       	ldi	r25, 0x18	; 24
 47a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 47e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00; //Seteo el timer1 en CTC mode
 482:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS12); //CTC mode, preescalador en N=256
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1<<OCIE1A); //Activo interrupciones de registro OCR01	
 48c:	ef e6       	ldi	r30, 0x6F	; 111
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	82 60       	ori	r24, 0x02	; 2
 494:	80 83       	st	Z, r24
 496:	08 95       	ret

00000498 <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks(){
	
	if(FLAG_Sensor==1){ //Esto corre cada 500ms
 498:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <FLAG_Sensor>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	21 f4       	brne	.+8      	; 0x4a8 <SEOS_Dispatch_Tasks+0x10>
		SYSTEM_Update(); //toma la temp y actualiza el sistema
 4a0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SYSTEM_Update>
		FLAG_Sensor=0;
 4a4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <FLAG_Sensor>
 4a8:	08 95       	ret

000004aa <__vector_11>:
	}
}

ISR(TIMER1_COMPA_vect){ //interrupción cada 100ms
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	8f 93       	push	r24
	if(++iCont==5){
 4b6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 4c0:	85 30       	cpi	r24, 0x05	; 5
 4c2:	29 f4       	brne	.+10     	; 0x4ce <__vector_11+0x24>
		FLAG_Sensor=1;	
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <FLAG_Sensor>
		iCont=0;
 4ca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
}
 4ce:	8f 91       	pop	r24
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <writeLCD>:
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
}

static void writeLCD(tempType temp){
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
	//texto -> "TEMP: xx.y °C"
	temp = temp*10;
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	40 e2       	ldi	r20, 0x20	; 32
 4e8:	51 e4       	ldi	r21, 0x41	; 65
 4ea:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulsf3>
	texto[6] = '0' + ((unsigned short)temp/100) % 10;
 4ee:	0e 94 33 04 	call	0x866	; 0x866 <__fixunssfsi>
 4f2:	6b 01       	movw	r12, r22
 4f4:	7c 01       	movw	r14, r24
 4f6:	9b 01       	movw	r18, r22
 4f8:	36 95       	lsr	r19
 4fa:	27 95       	ror	r18
 4fc:	36 95       	lsr	r19
 4fe:	27 95       	ror	r18
 500:	ab e7       	ldi	r26, 0x7B	; 123
 502:	b4 e1       	ldi	r27, 0x14	; 20
 504:	0e 94 86 05 	call	0xb0c	; 0xb0c <__umulhisi3>
 508:	ac 01       	movw	r20, r24
 50a:	56 95       	lsr	r21
 50c:	47 95       	ror	r20
 50e:	9a 01       	movw	r18, r20
 510:	ad ec       	ldi	r26, 0xCD	; 205
 512:	bc ec       	ldi	r27, 0xCC	; 204
 514:	0e 94 86 05 	call	0xb0c	; 0xb0c <__umulhisi3>
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
 51c:	96 95       	lsr	r25
 51e:	87 95       	ror	r24
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
 524:	9c 01       	movw	r18, r24
 526:	22 0f       	add	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	82 0f       	add	r24, r18
 538:	93 1f       	adc	r25, r19
 53a:	9a 01       	movw	r18, r20
 53c:	28 1b       	sub	r18, r24
 53e:	39 0b       	sbc	r19, r25
 540:	c9 01       	movw	r24, r18
 542:	e0 e0       	ldi	r30, 0x00	; 0
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	80 5d       	subi	r24, 0xD0	; 208
 548:	86 83       	std	Z+6, r24	; 0x06
	texto[7] = '0' + ((unsigned short)temp/10)  % 10;
 54a:	96 01       	movw	r18, r12
 54c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__umulhisi3>
 550:	ac 01       	movw	r20, r24
 552:	56 95       	lsr	r21
 554:	47 95       	ror	r20
 556:	56 95       	lsr	r21
 558:	47 95       	ror	r20
 55a:	56 95       	lsr	r21
 55c:	47 95       	ror	r20
 55e:	9a 01       	movw	r18, r20
 560:	0e 94 86 05 	call	0xb0c	; 0xb0c <__umulhisi3>
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	96 95       	lsr	r25
 56e:	87 95       	ror	r24
 570:	9c 01       	movw	r18, r24
 572:	22 0f       	add	r18, r18
 574:	33 1f       	adc	r19, r19
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	82 0f       	add	r24, r18
 584:	93 1f       	adc	r25, r19
 586:	9a 01       	movw	r18, r20
 588:	28 1b       	sub	r18, r24
 58a:	39 0b       	sbc	r19, r25
 58c:	c9 01       	movw	r24, r18
 58e:	80 5d       	subi	r24, 0xD0	; 208
 590:	87 83       	std	Z+7, r24	; 0x07
	texto[9] = '0' + (unsigned short)temp       % 10;
 592:	ca 01       	movw	r24, r20
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	44 0f       	add	r20, r20
 59a:	55 1f       	adc	r21, r21
 59c:	44 0f       	add	r20, r20
 59e:	55 1f       	adc	r21, r21
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	48 0f       	add	r20, r24
 5a6:	59 1f       	adc	r21, r25
 5a8:	c6 01       	movw	r24, r12
 5aa:	84 1b       	sub	r24, r20
 5ac:	95 0b       	sbc	r25, r21
 5ae:	80 5d       	subi	r24, 0xD0	; 208
 5b0:	81 87       	std	Z+9, r24	; 0x09
	//texto[10] = '0' + (unsigned short)temp        %10;
	LCDGotoXY(0,0);
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0e 94 15 01 	call	0x22a	; 0x22a <LCDGotoXY>
	LCDstring(texto,14);
 5ba:	6e e0       	ldi	r22, 0x0E	; 14
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDstring>
}
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	08 95       	ret

000005ce <SYSTEM_Init>:


static void writeLCD(tempType temp);

void SYSTEM_Init(){
	ventilador_on=0;
 5ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ventilador_on>
	calefactor_on=0;
 5d2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <calefactor_on>
	LCDclr();
 5d6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
 5da:	08 95       	ret

000005dc <SYSTEM_Update>:
}

//Toma la temperatura del sensor y la actualiza en el LCD
//Prende y apaga el calefactor en caso de ser necesario
void SYSTEM_Update(){
 5dc:	cf 92       	push	r12
 5de:	df 92       	push	r13
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
	temperatura = SENSORTEMP_MeasureTemp();
 5e4:	0e 94 c4 01 	call	0x388	; 0x388 <SENSORTEMP_MeasureTemp>
 5e8:	6b 01       	movw	r12, r22
 5ea:	7c 01       	movw	r14, r24
 5ec:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <temperatura>
 5f0:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <temperatura+0x1>
 5f4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temperatura+0x2>
 5f8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temperatura+0x3>
	if(temperatura>MAX_T){
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	40 ec       	ldi	r20, 0xC0	; 192
 602:	51 e4       	ldi	r21, 0x41	; 65
 604:	0e 94 14 05 	call	0xa28	; 0xa28 <__gesf2>
 608:	18 16       	cp	r1, r24
 60a:	54 f4       	brge	.+20     	; 0x620 <SYSTEM_Update+0x44>
		if(!ventilador_on){
 60c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ventilador_on>
 610:	81 11       	cpse	r24, r1
 612:	2a c0       	rjmp	.+84     	; 0x668 <SYSTEM_Update+0x8c>
			VENTILADOR_TurnOn();
 614:	0e 94 4b 03 	call	0x696	; 0x696 <VENTILADOR_TurnOn>
			ventilador_on=1;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ventilador_on>
 61e:	24 c0       	rjmp	.+72     	; 0x668 <SYSTEM_Update+0x8c>
		}
	}
	else if(temperatura<MIN_T){
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	48 e8       	ldi	r20, 0x88	; 136
 626:	51 e4       	ldi	r21, 0x41	; 65
 628:	c7 01       	movw	r24, r14
 62a:	b6 01       	movw	r22, r12
 62c:	0e 94 bc 03 	call	0x778	; 0x778 <__cmpsf2>
 630:	88 23       	and	r24, r24
 632:	54 f4       	brge	.+20     	; 0x648 <SYSTEM_Update+0x6c>
		if(!calefactor_on){
 634:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <calefactor_on>
 638:	81 11       	cpse	r24, r1
 63a:	16 c0       	rjmp	.+44     	; 0x668 <SYSTEM_Update+0x8c>
			CALEFACTOR_TurnOn();
 63c:	0e 94 97 00 	call	0x12e	; 0x12e <CALEFACTOR_TurnOn>
			calefactor_on=1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <calefactor_on>
 646:	10 c0       	rjmp	.+32     	; 0x668 <SYSTEM_Update+0x8c>
		}
	}
	else{
		if(calefactor_on){
 648:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <calefactor_on>
 64c:	88 23       	and	r24, r24
 64e:	21 f0       	breq	.+8      	; 0x658 <SYSTEM_Update+0x7c>
			CALEFACTOR_TurnOff();
 650:	0e 94 93 00 	call	0x126	; 0x126 <CALEFACTOR_TurnOff>
			calefactor_on=0;
 654:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <calefactor_on>
		}	
		if(ventilador_on){
 658:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ventilador_on>
 65c:	88 23       	and	r24, r24
 65e:	21 f0       	breq	.+8      	; 0x668 <SYSTEM_Update+0x8c>
			VENTILADOR_TurnOff();
 660:	0e 94 47 03 	call	0x68e	; 0x68e <VENTILADOR_TurnOff>
			ventilador_on=0;
 664:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ventilador_on>
		}
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
 668:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <temperatura>
 66c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <temperatura+0x1>
 670:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <temperatura+0x2>
 674:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <temperatura+0x3>
 678:	0e 94 6d 02 	call	0x4da	; 0x4da <writeLCD>
}
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	08 95       	ret

00000686 <VENTILADOR_Init>:

#include "Ventilador.h"

void VENTILADOR_Init(){
	//setea pin pb0 como escritura
	DDRB |= (1<<PORTB0);
 686:	84 b1       	in	r24, 0x04	; 4
 688:	81 60       	ori	r24, 0x01	; 1
 68a:	84 b9       	out	0x04, r24	; 4
 68c:	08 95       	ret

0000068e <VENTILADOR_TurnOff>:

}

void VENTILADOR_TurnOff(){
	//apaga el led conecatdo a pb0
	PORTB &= ~(1<<PORTB0);
 68e:	85 b1       	in	r24, 0x05	; 5
 690:	8e 7f       	andi	r24, 0xFE	; 254
 692:	85 b9       	out	0x05, r24	; 5
 694:	08 95       	ret

00000696 <VENTILADOR_TurnOn>:
}

void VENTILADOR_TurnOn(){
	//prende el led conectado a pb0
	PORTB |= (1<<PORTB0);
 696:	85 b1       	in	r24, 0x05	; 5
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	85 b9       	out	0x05, r24	; 5
 69c:	08 95       	ret

0000069e <__subsf3>:
 69e:	50 58       	subi	r21, 0x80	; 128

000006a0 <__addsf3>:
 6a0:	bb 27       	eor	r27, r27
 6a2:	aa 27       	eor	r26, r26
 6a4:	0e 94 67 03 	call	0x6ce	; 0x6ce <__addsf3x>
 6a8:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_round>
 6ac:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_pscA>
 6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__addsf3+0x20>
 6b2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_pscB>
 6b6:	20 f0       	brcs	.+8      	; 0x6c0 <__addsf3+0x20>
 6b8:	39 f4       	brne	.+14     	; 0x6c8 <__addsf3+0x28>
 6ba:	9f 3f       	cpi	r25, 0xFF	; 255
 6bc:	19 f4       	brne	.+6      	; 0x6c4 <__addsf3+0x24>
 6be:	26 f4       	brtc	.+8      	; 0x6c8 <__addsf3+0x28>
 6c0:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_nan>
 6c4:	0e f4       	brtc	.+2      	; 0x6c8 <__addsf3+0x28>
 6c6:	e0 95       	com	r30
 6c8:	e7 fb       	bst	r30, 7
 6ca:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_inf>

000006ce <__addsf3x>:
 6ce:	e9 2f       	mov	r30, r25
 6d0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_split3>
 6d4:	58 f3       	brcs	.-42     	; 0x6ac <__addsf3+0xc>
 6d6:	ba 17       	cp	r27, r26
 6d8:	62 07       	cpc	r22, r18
 6da:	73 07       	cpc	r23, r19
 6dc:	84 07       	cpc	r24, r20
 6de:	95 07       	cpc	r25, r21
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <__addsf3x+0x1c>
 6e2:	79 f4       	brne	.+30     	; 0x702 <__addsf3x+0x34>
 6e4:	a6 f5       	brtc	.+104    	; 0x74e <__addsf3x+0x80>
 6e6:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_zero>
 6ea:	0e f4       	brtc	.+2      	; 0x6ee <__addsf3x+0x20>
 6ec:	e0 95       	com	r30
 6ee:	0b 2e       	mov	r0, r27
 6f0:	ba 2f       	mov	r27, r26
 6f2:	a0 2d       	mov	r26, r0
 6f4:	0b 01       	movw	r0, r22
 6f6:	b9 01       	movw	r22, r18
 6f8:	90 01       	movw	r18, r0
 6fa:	0c 01       	movw	r0, r24
 6fc:	ca 01       	movw	r24, r20
 6fe:	a0 01       	movw	r20, r0
 700:	11 24       	eor	r1, r1
 702:	ff 27       	eor	r31, r31
 704:	59 1b       	sub	r21, r25
 706:	99 f0       	breq	.+38     	; 0x72e <__addsf3x+0x60>
 708:	59 3f       	cpi	r21, 0xF9	; 249
 70a:	50 f4       	brcc	.+20     	; 0x720 <__addsf3x+0x52>
 70c:	50 3e       	cpi	r21, 0xE0	; 224
 70e:	68 f1       	brcs	.+90     	; 0x76a <__addsf3x+0x9c>
 710:	1a 16       	cp	r1, r26
 712:	f0 40       	sbci	r31, 0x00	; 0
 714:	a2 2f       	mov	r26, r18
 716:	23 2f       	mov	r18, r19
 718:	34 2f       	mov	r19, r20
 71a:	44 27       	eor	r20, r20
 71c:	58 5f       	subi	r21, 0xF8	; 248
 71e:	f3 cf       	rjmp	.-26     	; 0x706 <__addsf3x+0x38>
 720:	46 95       	lsr	r20
 722:	37 95       	ror	r19
 724:	27 95       	ror	r18
 726:	a7 95       	ror	r26
 728:	f0 40       	sbci	r31, 0x00	; 0
 72a:	53 95       	inc	r21
 72c:	c9 f7       	brne	.-14     	; 0x720 <__addsf3x+0x52>
 72e:	7e f4       	brtc	.+30     	; 0x74e <__addsf3x+0x80>
 730:	1f 16       	cp	r1, r31
 732:	ba 0b       	sbc	r27, r26
 734:	62 0b       	sbc	r22, r18
 736:	73 0b       	sbc	r23, r19
 738:	84 0b       	sbc	r24, r20
 73a:	ba f0       	brmi	.+46     	; 0x76a <__addsf3x+0x9c>
 73c:	91 50       	subi	r25, 0x01	; 1
 73e:	a1 f0       	breq	.+40     	; 0x768 <__addsf3x+0x9a>
 740:	ff 0f       	add	r31, r31
 742:	bb 1f       	adc	r27, r27
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	c2 f7       	brpl	.-16     	; 0x73c <__addsf3x+0x6e>
 74c:	0e c0       	rjmp	.+28     	; 0x76a <__addsf3x+0x9c>
 74e:	ba 0f       	add	r27, r26
 750:	62 1f       	adc	r22, r18
 752:	73 1f       	adc	r23, r19
 754:	84 1f       	adc	r24, r20
 756:	48 f4       	brcc	.+18     	; 0x76a <__addsf3x+0x9c>
 758:	87 95       	ror	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f7 95       	ror	r31
 762:	9e 3f       	cpi	r25, 0xFE	; 254
 764:	08 f0       	brcs	.+2      	; 0x768 <__addsf3x+0x9a>
 766:	b0 cf       	rjmp	.-160    	; 0x6c8 <__addsf3+0x28>
 768:	93 95       	inc	r25
 76a:	88 0f       	add	r24, r24
 76c:	08 f0       	brcs	.+2      	; 0x770 <__addsf3x+0xa2>
 76e:	99 27       	eor	r25, r25
 770:	ee 0f       	add	r30, r30
 772:	97 95       	ror	r25
 774:	87 95       	ror	r24
 776:	08 95       	ret

00000778 <__cmpsf2>:
 778:	0e 94 9f 04 	call	0x93e	; 0x93e <__fp_cmp>
 77c:	08 f4       	brcc	.+2      	; 0x780 <__cmpsf2+0x8>
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	08 95       	ret

00000782 <__divsf3>:
 782:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__divsf3x>
 786:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_round>
 78a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_pscB>
 78e:	58 f0       	brcs	.+22     	; 0x7a6 <__divsf3+0x24>
 790:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_pscA>
 794:	40 f0       	brcs	.+16     	; 0x7a6 <__divsf3+0x24>
 796:	29 f4       	brne	.+10     	; 0x7a2 <__divsf3+0x20>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	29 f0       	breq	.+10     	; 0x7a6 <__divsf3+0x24>
 79c:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_inf>
 7a0:	51 11       	cpse	r21, r1
 7a2:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>
 7a6:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_nan>

000007aa <__divsf3x>:
 7aa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_split3>
 7ae:	68 f3       	brcs	.-38     	; 0x78a <__divsf3+0x8>

000007b0 <__divsf3_pse>:
 7b0:	99 23       	and	r25, r25
 7b2:	b1 f3       	breq	.-20     	; 0x7a0 <__divsf3+0x1e>
 7b4:	55 23       	and	r21, r21
 7b6:	91 f3       	breq	.-28     	; 0x79c <__divsf3+0x1a>
 7b8:	95 1b       	sub	r25, r21
 7ba:	55 0b       	sbc	r21, r21
 7bc:	bb 27       	eor	r27, r27
 7be:	aa 27       	eor	r26, r26
 7c0:	62 17       	cp	r22, r18
 7c2:	73 07       	cpc	r23, r19
 7c4:	84 07       	cpc	r24, r20
 7c6:	38 f0       	brcs	.+14     	; 0x7d6 <__divsf3_pse+0x26>
 7c8:	9f 5f       	subi	r25, 0xFF	; 255
 7ca:	5f 4f       	sbci	r21, 0xFF	; 255
 7cc:	22 0f       	add	r18, r18
 7ce:	33 1f       	adc	r19, r19
 7d0:	44 1f       	adc	r20, r20
 7d2:	aa 1f       	adc	r26, r26
 7d4:	a9 f3       	breq	.-22     	; 0x7c0 <__divsf3_pse+0x10>
 7d6:	35 d0       	rcall	.+106    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7d8:	0e 2e       	mov	r0, r30
 7da:	3a f0       	brmi	.+14     	; 0x7ea <__divsf3_pse+0x3a>
 7dc:	e0 e8       	ldi	r30, 0x80	; 128
 7de:	32 d0       	rcall	.+100    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7e0:	91 50       	subi	r25, 0x01	; 1
 7e2:	50 40       	sbci	r21, 0x00	; 0
 7e4:	e6 95       	lsr	r30
 7e6:	00 1c       	adc	r0, r0
 7e8:	ca f7       	brpl	.-14     	; 0x7dc <__divsf3_pse+0x2c>
 7ea:	2b d0       	rcall	.+86     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7ec:	fe 2f       	mov	r31, r30
 7ee:	29 d0       	rcall	.+82     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7f0:	66 0f       	add	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	88 1f       	adc	r24, r24
 7f6:	bb 1f       	adc	r27, r27
 7f8:	26 17       	cp	r18, r22
 7fa:	37 07       	cpc	r19, r23
 7fc:	48 07       	cpc	r20, r24
 7fe:	ab 07       	cpc	r26, r27
 800:	b0 e8       	ldi	r27, 0x80	; 128
 802:	09 f0       	breq	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 804:	bb 0b       	sbc	r27, r27
 806:	80 2d       	mov	r24, r0
 808:	bf 01       	movw	r22, r30
 80a:	ff 27       	eor	r31, r31
 80c:	93 58       	subi	r25, 0x83	; 131
 80e:	5f 4f       	sbci	r21, 0xFF	; 255
 810:	3a f0       	brmi	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 812:	9e 3f       	cpi	r25, 0xFE	; 254
 814:	51 05       	cpc	r21, r1
 816:	78 f0       	brcs	.+30     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 818:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_inf>
 81c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>
 820:	5f 3f       	cpi	r21, 0xFF	; 255
 822:	e4 f3       	brlt	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 824:	98 3e       	cpi	r25, 0xE8	; 232
 826:	d4 f3       	brlt	.-12     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 828:	86 95       	lsr	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f7 95       	ror	r31
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	c9 f7       	brne	.-14     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 836:	88 0f       	add	r24, r24
 838:	91 1d       	adc	r25, r1
 83a:	96 95       	lsr	r25
 83c:	87 95       	ror	r24
 83e:	97 f9       	bld	r25, 7
 840:	08 95       	ret
 842:	e1 e0       	ldi	r30, 0x01	; 1
 844:	66 0f       	add	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	bb 1f       	adc	r27, r27
 84c:	62 17       	cp	r22, r18
 84e:	73 07       	cpc	r23, r19
 850:	84 07       	cpc	r24, r20
 852:	ba 07       	cpc	r27, r26
 854:	20 f0       	brcs	.+8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 856:	62 1b       	sub	r22, r18
 858:	73 0b       	sbc	r23, r19
 85a:	84 0b       	sbc	r24, r20
 85c:	ba 0b       	sbc	r27, r26
 85e:	ee 1f       	adc	r30, r30
 860:	88 f7       	brcc	.-30     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 862:	e0 95       	com	r30
 864:	08 95       	ret

00000866 <__fixunssfsi>:
 866:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fp_splitA>
 86a:	88 f0       	brcs	.+34     	; 0x88e <__fixunssfsi+0x28>
 86c:	9f 57       	subi	r25, 0x7F	; 127
 86e:	98 f0       	brcs	.+38     	; 0x896 <__fixunssfsi+0x30>
 870:	b9 2f       	mov	r27, r25
 872:	99 27       	eor	r25, r25
 874:	b7 51       	subi	r27, 0x17	; 23
 876:	b0 f0       	brcs	.+44     	; 0x8a4 <__fixunssfsi+0x3e>
 878:	e1 f0       	breq	.+56     	; 0x8b2 <__fixunssfsi+0x4c>
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	1a f0       	brmi	.+6      	; 0x88a <__fixunssfsi+0x24>
 884:	ba 95       	dec	r27
 886:	c9 f7       	brne	.-14     	; 0x87a <__fixunssfsi+0x14>
 888:	14 c0       	rjmp	.+40     	; 0x8b2 <__fixunssfsi+0x4c>
 88a:	b1 30       	cpi	r27, 0x01	; 1
 88c:	91 f0       	breq	.+36     	; 0x8b2 <__fixunssfsi+0x4c>
 88e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_zero>
 892:	b1 e0       	ldi	r27, 0x01	; 1
 894:	08 95       	ret
 896:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_zero>
 89a:	67 2f       	mov	r22, r23
 89c:	78 2f       	mov	r23, r24
 89e:	88 27       	eor	r24, r24
 8a0:	b8 5f       	subi	r27, 0xF8	; 248
 8a2:	39 f0       	breq	.+14     	; 0x8b2 <__fixunssfsi+0x4c>
 8a4:	b9 3f       	cpi	r27, 0xF9	; 249
 8a6:	cc f3       	brlt	.-14     	; 0x89a <__fixunssfsi+0x34>
 8a8:	86 95       	lsr	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b3 95       	inc	r27
 8b0:	d9 f7       	brne	.-10     	; 0x8a8 <__fixunssfsi+0x42>
 8b2:	3e f4       	brtc	.+14     	; 0x8c2 <__fixunssfsi+0x5c>
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__floatunsisf>:
 8c4:	e8 94       	clt
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <__floatsisf+0x12>

000008c8 <__floatsisf>:
 8c8:	97 fb       	bst	r25, 7
 8ca:	3e f4       	brtc	.+14     	; 0x8da <__floatsisf+0x12>
 8cc:	90 95       	com	r25
 8ce:	80 95       	com	r24
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	99 23       	and	r25, r25
 8dc:	a9 f0       	breq	.+42     	; 0x908 <__stack+0x9>
 8de:	f9 2f       	mov	r31, r25
 8e0:	96 e9       	ldi	r25, 0x96	; 150
 8e2:	bb 27       	eor	r27, r27
 8e4:	93 95       	inc	r25
 8e6:	f6 95       	lsr	r31
 8e8:	87 95       	ror	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b7 95       	ror	r27
 8f0:	f1 11       	cpse	r31, r1
 8f2:	f8 cf       	rjmp	.-16     	; 0x8e4 <__floatsisf+0x1c>
 8f4:	fa f4       	brpl	.+62     	; 0x934 <__stack+0x35>
 8f6:	bb 0f       	add	r27, r27
 8f8:	11 f4       	brne	.+4      	; 0x8fe <__floatsisf+0x36>
 8fa:	60 ff       	sbrs	r22, 0
 8fc:	1b c0       	rjmp	.+54     	; 0x934 <__stack+0x35>
 8fe:	6f 5f       	subi	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	16 c0       	rjmp	.+44     	; 0x934 <__stack+0x35>
 908:	88 23       	and	r24, r24
 90a:	11 f0       	breq	.+4      	; 0x910 <__stack+0x11>
 90c:	96 e9       	ldi	r25, 0x96	; 150
 90e:	11 c0       	rjmp	.+34     	; 0x932 <__stack+0x33>
 910:	77 23       	and	r23, r23
 912:	21 f0       	breq	.+8      	; 0x91c <__stack+0x1d>
 914:	9e e8       	ldi	r25, 0x8E	; 142
 916:	87 2f       	mov	r24, r23
 918:	76 2f       	mov	r23, r22
 91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0x27>
 91c:	66 23       	and	r22, r22
 91e:	71 f0       	breq	.+28     	; 0x93c <__stack+0x3d>
 920:	96 e8       	ldi	r25, 0x86	; 134
 922:	86 2f       	mov	r24, r22
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	2a f0       	brmi	.+10     	; 0x934 <__stack+0x35>
 92a:	9a 95       	dec	r25
 92c:	66 0f       	add	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	da f7       	brpl	.-10     	; 0x92a <__stack+0x2b>
 934:	88 0f       	add	r24, r24
 936:	96 95       	lsr	r25
 938:	87 95       	ror	r24
 93a:	97 f9       	bld	r25, 7
 93c:	08 95       	ret

0000093e <__fp_cmp>:
 93e:	99 0f       	add	r25, r25
 940:	00 08       	sbc	r0, r0
 942:	55 0f       	add	r21, r21
 944:	aa 0b       	sbc	r26, r26
 946:	e0 e8       	ldi	r30, 0x80	; 128
 948:	fe ef       	ldi	r31, 0xFE	; 254
 94a:	16 16       	cp	r1, r22
 94c:	17 06       	cpc	r1, r23
 94e:	e8 07       	cpc	r30, r24
 950:	f9 07       	cpc	r31, r25
 952:	c0 f0       	brcs	.+48     	; 0x984 <__fp_cmp+0x46>
 954:	12 16       	cp	r1, r18
 956:	13 06       	cpc	r1, r19
 958:	e4 07       	cpc	r30, r20
 95a:	f5 07       	cpc	r31, r21
 95c:	98 f0       	brcs	.+38     	; 0x984 <__fp_cmp+0x46>
 95e:	62 1b       	sub	r22, r18
 960:	73 0b       	sbc	r23, r19
 962:	84 0b       	sbc	r24, r20
 964:	95 0b       	sbc	r25, r21
 966:	39 f4       	brne	.+14     	; 0x976 <__fp_cmp+0x38>
 968:	0a 26       	eor	r0, r26
 96a:	61 f0       	breq	.+24     	; 0x984 <__fp_cmp+0x46>
 96c:	23 2b       	or	r18, r19
 96e:	24 2b       	or	r18, r20
 970:	25 2b       	or	r18, r21
 972:	21 f4       	brne	.+8      	; 0x97c <__fp_cmp+0x3e>
 974:	08 95       	ret
 976:	0a 26       	eor	r0, r26
 978:	09 f4       	brne	.+2      	; 0x97c <__fp_cmp+0x3e>
 97a:	a1 40       	sbci	r26, 0x01	; 1
 97c:	a6 95       	lsr	r26
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	81 1d       	adc	r24, r1
 982:	81 1d       	adc	r24, r1
 984:	08 95       	ret

00000986 <__fp_inf>:
 986:	97 f9       	bld	r25, 7
 988:	9f 67       	ori	r25, 0x7F	; 127
 98a:	80 e8       	ldi	r24, 0x80	; 128
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	08 95       	ret

00000992 <__fp_nan>:
 992:	9f ef       	ldi	r25, 0xFF	; 255
 994:	80 ec       	ldi	r24, 0xC0	; 192
 996:	08 95       	ret

00000998 <__fp_pscA>:
 998:	00 24       	eor	r0, r0
 99a:	0a 94       	dec	r0
 99c:	16 16       	cp	r1, r22
 99e:	17 06       	cpc	r1, r23
 9a0:	18 06       	cpc	r1, r24
 9a2:	09 06       	cpc	r0, r25
 9a4:	08 95       	ret

000009a6 <__fp_pscB>:
 9a6:	00 24       	eor	r0, r0
 9a8:	0a 94       	dec	r0
 9aa:	12 16       	cp	r1, r18
 9ac:	13 06       	cpc	r1, r19
 9ae:	14 06       	cpc	r1, r20
 9b0:	05 06       	cpc	r0, r21
 9b2:	08 95       	ret

000009b4 <__fp_round>:
 9b4:	09 2e       	mov	r0, r25
 9b6:	03 94       	inc	r0
 9b8:	00 0c       	add	r0, r0
 9ba:	11 f4       	brne	.+4      	; 0x9c0 <__fp_round+0xc>
 9bc:	88 23       	and	r24, r24
 9be:	52 f0       	brmi	.+20     	; 0x9d4 <__fp_round+0x20>
 9c0:	bb 0f       	add	r27, r27
 9c2:	40 f4       	brcc	.+16     	; 0x9d4 <__fp_round+0x20>
 9c4:	bf 2b       	or	r27, r31
 9c6:	11 f4       	brne	.+4      	; 0x9cc <__fp_round+0x18>
 9c8:	60 ff       	sbrs	r22, 0
 9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <__fp_round+0x20>
 9cc:	6f 5f       	subi	r22, 0xFF	; 255
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	8f 4f       	sbci	r24, 0xFF	; 255
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	08 95       	ret

000009d6 <__fp_split3>:
 9d6:	57 fd       	sbrc	r21, 7
 9d8:	90 58       	subi	r25, 0x80	; 128
 9da:	44 0f       	add	r20, r20
 9dc:	55 1f       	adc	r21, r21
 9de:	59 f0       	breq	.+22     	; 0x9f6 <__fp_splitA+0x10>
 9e0:	5f 3f       	cpi	r21, 0xFF	; 255
 9e2:	71 f0       	breq	.+28     	; 0xa00 <__fp_splitA+0x1a>
 9e4:	47 95       	ror	r20

000009e6 <__fp_splitA>:
 9e6:	88 0f       	add	r24, r24
 9e8:	97 fb       	bst	r25, 7
 9ea:	99 1f       	adc	r25, r25
 9ec:	61 f0       	breq	.+24     	; 0xa06 <__fp_splitA+0x20>
 9ee:	9f 3f       	cpi	r25, 0xFF	; 255
 9f0:	79 f0       	breq	.+30     	; 0xa10 <__fp_splitA+0x2a>
 9f2:	87 95       	ror	r24
 9f4:	08 95       	ret
 9f6:	12 16       	cp	r1, r18
 9f8:	13 06       	cpc	r1, r19
 9fa:	14 06       	cpc	r1, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	f2 cf       	rjmp	.-28     	; 0x9e4 <__fp_split3+0xe>
 a00:	46 95       	lsr	r20
 a02:	f1 df       	rcall	.-30     	; 0x9e6 <__fp_splitA>
 a04:	08 c0       	rjmp	.+16     	; 0xa16 <__fp_splitA+0x30>
 a06:	16 16       	cp	r1, r22
 a08:	17 06       	cpc	r1, r23
 a0a:	18 06       	cpc	r1, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	f1 cf       	rjmp	.-30     	; 0x9f2 <__fp_splitA+0xc>
 a10:	86 95       	lsr	r24
 a12:	71 05       	cpc	r23, r1
 a14:	61 05       	cpc	r22, r1
 a16:	08 94       	sec
 a18:	08 95       	ret

00000a1a <__fp_zero>:
 a1a:	e8 94       	clt

00000a1c <__fp_szero>:
 a1c:	bb 27       	eor	r27, r27
 a1e:	66 27       	eor	r22, r22
 a20:	77 27       	eor	r23, r23
 a22:	cb 01       	movw	r24, r22
 a24:	97 f9       	bld	r25, 7
 a26:	08 95       	ret

00000a28 <__gesf2>:
 a28:	0e 94 9f 04 	call	0x93e	; 0x93e <__fp_cmp>
 a2c:	08 f4       	brcc	.+2      	; 0xa30 <__gesf2+0x8>
 a2e:	8f ef       	ldi	r24, 0xFF	; 255
 a30:	08 95       	ret

00000a32 <__mulsf3>:
 a32:	0e 94 2c 05 	call	0xa58	; 0xa58 <__mulsf3x>
 a36:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_round>
 a3a:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_pscA>
 a3e:	38 f0       	brcs	.+14     	; 0xa4e <__mulsf3+0x1c>
 a40:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_pscB>
 a44:	20 f0       	brcs	.+8      	; 0xa4e <__mulsf3+0x1c>
 a46:	95 23       	and	r25, r21
 a48:	11 f0       	breq	.+4      	; 0xa4e <__mulsf3+0x1c>
 a4a:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_inf>
 a4e:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_nan>
 a52:	11 24       	eor	r1, r1
 a54:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>

00000a58 <__mulsf3x>:
 a58:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_split3>
 a5c:	70 f3       	brcs	.-36     	; 0xa3a <__mulsf3+0x8>

00000a5e <__mulsf3_pse>:
 a5e:	95 9f       	mul	r25, r21
 a60:	c1 f3       	breq	.-16     	; 0xa52 <__mulsf3+0x20>
 a62:	95 0f       	add	r25, r21
 a64:	50 e0       	ldi	r21, 0x00	; 0
 a66:	55 1f       	adc	r21, r21
 a68:	62 9f       	mul	r22, r18
 a6a:	f0 01       	movw	r30, r0
 a6c:	72 9f       	mul	r23, r18
 a6e:	bb 27       	eor	r27, r27
 a70:	f0 0d       	add	r31, r0
 a72:	b1 1d       	adc	r27, r1
 a74:	63 9f       	mul	r22, r19
 a76:	aa 27       	eor	r26, r26
 a78:	f0 0d       	add	r31, r0
 a7a:	b1 1d       	adc	r27, r1
 a7c:	aa 1f       	adc	r26, r26
 a7e:	64 9f       	mul	r22, r20
 a80:	66 27       	eor	r22, r22
 a82:	b0 0d       	add	r27, r0
 a84:	a1 1d       	adc	r26, r1
 a86:	66 1f       	adc	r22, r22
 a88:	82 9f       	mul	r24, r18
 a8a:	22 27       	eor	r18, r18
 a8c:	b0 0d       	add	r27, r0
 a8e:	a1 1d       	adc	r26, r1
 a90:	62 1f       	adc	r22, r18
 a92:	73 9f       	mul	r23, r19
 a94:	b0 0d       	add	r27, r0
 a96:	a1 1d       	adc	r26, r1
 a98:	62 1f       	adc	r22, r18
 a9a:	83 9f       	mul	r24, r19
 a9c:	a0 0d       	add	r26, r0
 a9e:	61 1d       	adc	r22, r1
 aa0:	22 1f       	adc	r18, r18
 aa2:	74 9f       	mul	r23, r20
 aa4:	33 27       	eor	r19, r19
 aa6:	a0 0d       	add	r26, r0
 aa8:	61 1d       	adc	r22, r1
 aaa:	23 1f       	adc	r18, r19
 aac:	84 9f       	mul	r24, r20
 aae:	60 0d       	add	r22, r0
 ab0:	21 1d       	adc	r18, r1
 ab2:	82 2f       	mov	r24, r18
 ab4:	76 2f       	mov	r23, r22
 ab6:	6a 2f       	mov	r22, r26
 ab8:	11 24       	eor	r1, r1
 aba:	9f 57       	subi	r25, 0x7F	; 127
 abc:	50 40       	sbci	r21, 0x00	; 0
 abe:	9a f0       	brmi	.+38     	; 0xae6 <__mulsf3_pse+0x88>
 ac0:	f1 f0       	breq	.+60     	; 0xafe <__mulsf3_pse+0xa0>
 ac2:	88 23       	and	r24, r24
 ac4:	4a f0       	brmi	.+18     	; 0xad8 <__mulsf3_pse+0x7a>
 ac6:	ee 0f       	add	r30, r30
 ac8:	ff 1f       	adc	r31, r31
 aca:	bb 1f       	adc	r27, r27
 acc:	66 1f       	adc	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	91 50       	subi	r25, 0x01	; 1
 ad4:	50 40       	sbci	r21, 0x00	; 0
 ad6:	a9 f7       	brne	.-22     	; 0xac2 <__mulsf3_pse+0x64>
 ad8:	9e 3f       	cpi	r25, 0xFE	; 254
 ada:	51 05       	cpc	r21, r1
 adc:	80 f0       	brcs	.+32     	; 0xafe <__mulsf3_pse+0xa0>
 ade:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_inf>
 ae2:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>
 ae6:	5f 3f       	cpi	r21, 0xFF	; 255
 ae8:	e4 f3       	brlt	.-8      	; 0xae2 <__mulsf3_pse+0x84>
 aea:	98 3e       	cpi	r25, 0xE8	; 232
 aec:	d4 f3       	brlt	.-12     	; 0xae2 <__mulsf3_pse+0x84>
 aee:	86 95       	lsr	r24
 af0:	77 95       	ror	r23
 af2:	67 95       	ror	r22
 af4:	b7 95       	ror	r27
 af6:	f7 95       	ror	r31
 af8:	e7 95       	ror	r30
 afa:	9f 5f       	subi	r25, 0xFF	; 255
 afc:	c1 f7       	brne	.-16     	; 0xaee <__mulsf3_pse+0x90>
 afe:	fe 2b       	or	r31, r30
 b00:	88 0f       	add	r24, r24
 b02:	91 1d       	adc	r25, r1
 b04:	96 95       	lsr	r25
 b06:	87 95       	ror	r24
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret

00000b0c <__umulhisi3>:
 b0c:	a2 9f       	mul	r26, r18
 b0e:	b0 01       	movw	r22, r0
 b10:	b3 9f       	mul	r27, r19
 b12:	c0 01       	movw	r24, r0
 b14:	a3 9f       	mul	r26, r19
 b16:	70 0d       	add	r23, r0
 b18:	81 1d       	adc	r24, r1
 b1a:	11 24       	eor	r1, r1
 b1c:	91 1d       	adc	r25, r1
 b1e:	b2 9f       	mul	r27, r18
 b20:	70 0d       	add	r23, r0
 b22:	81 1d       	adc	r24, r1
 b24:	11 24       	eor	r1, r1
 b26:	91 1d       	adc	r25, r1
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
