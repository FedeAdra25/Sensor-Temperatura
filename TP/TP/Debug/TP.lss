
TP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000059a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  0000063c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017f2  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b91  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d45  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  0000395c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070e  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6c  00000000  00000000  0000442e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000529a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_11>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ea e9       	ldi	r30, 0x9A	; 154
  bc:	f5 e0       	ldi	r31, 0x05	; 5
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ae 30       	cpi	r26, 0x0E	; 14
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	ae e0       	ldi	r26, 0x0E	; 14
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a4 31       	cpi	r26, 0x14	; 20
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 ac 01 	call	0x358	; 0x358 <main>
  de:	0c 94 cb 02 	jmp	0x596	; 0x596 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_Init>:

#include "ADC.h"

void ADC_Init(){
	//inicializa el ADC
	ADMUX=0x00; //Vref -> AREF = 5V , Right justified, pin ADC0
  e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //Enable ADC w/ prescaler 128
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC0D); //para que consuma menos el MCU deshabilitamos el Digital Input del puerto
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  f6:	08 95       	ret

000000f8 <ADC_GetData>:
	//Convierte la entrada del pin ADC0 y la pasa al registro
	//retorna el valor del registro
	//con este valor, el sensortemp calcula el voltaje
	//y luego la temperatura
	
	ADCSRA |= (1<<ADSC); //Inicializo conversion
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF) == 0)); //se bloquea hasta que termina la conversión
 102:	80 81       	ld	r24, Z
	//to-do? timeout para evitar bloqueo?
	ADCSRA |= (1<<ADIF); //borra flag (debe borrarse si se usa polling)
 104:	80 81       	ld	r24, Z
 106:	80 61       	ori	r24, 0x10	; 16
 108:	80 83       	st	Z, r24
	
	return ADC; //retorno el valor obtenido en mi ADC	
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 112:	08 95       	ret

00000114 <CALEFACTOR_Init>:
#include "Calefactor.h"


void CALEFACTOR_Init(){
	//setea pin pb1 como escritura
	DDRB |= (1<<PORTB1);
 114:	84 b1       	in	r24, 0x04	; 4
 116:	82 60       	ori	r24, 0x02	; 2
 118:	84 b9       	out	0x04, r24	; 4
 11a:	08 95       	ret

0000011c <CALEFACTOR_TurnOff>:
}

void CALEFACTOR_TurnOff(){
	//apaga el led conecatdo a pb1
	PORTB &= ~(1<<PORTB1);
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret

00000124 <CALEFACTOR_TurnOn>:
}

void CALEFACTOR_TurnOn(){
	PORTB |= (1<<PORTB1);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	82 60       	ori	r24, 0x02	; 2
 128:	85 b9       	out	0x05, r24	; 5
 12a:	08 95       	ret

0000012c <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 12c:	98 2f       	mov	r25, r24
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	9b b9       	out	0x0b, r25	; 11
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	91 60       	ori	r25, 0x01	; 1
 136:	9b b9       	out	0x0b, r25	; 11
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	94 60       	ori	r25, 0x04	; 4
 13c:	9b b9       	out	0x0b, r25	; 11
 13e:	25 ed       	ldi	r18, 0xD5	; 213
 140:	2a 95       	dec	r18
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendChar+0x14>
 144:	00 00       	nop
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	9b 7f       	andi	r25, 0xFB	; 251
 14a:	9b b9       	out	0x0b, r25	; 11
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	9e 7f       	andi	r25, 0xFE	; 254
 150:	9b b9       	out	0x0b, r25	; 11
 152:	95 ed       	ldi	r25, 0xD5	; 213
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDsendChar+0x28>
 158:	00 00       	nop
 15a:	20 e1       	ldi	r18, 0x10	; 16
 15c:	82 9f       	mul	r24, r18
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	8b b9       	out	0x0b, r24	; 11
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	81 60       	ori	r24, 0x01	; 1
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	85 ed       	ldi	r24, 0xD5	; 213
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <LCDsendChar+0x46>
 176:	00 00       	nop
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	8b b9       	out	0x0b, r24	; 11
 184:	95 ed       	ldi	r25, 0xD5	; 213
 186:	9a 95       	dec	r25
 188:	f1 f7       	brne	.-4      	; 0x186 <LCDsendChar+0x5a>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <LCDsendCommand>:
 18e:	98 2f       	mov	r25, r24
 190:	90 7f       	andi	r25, 0xF0	; 240
 192:	9b b9       	out	0x0b, r25	; 11
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	94 60       	ori	r25, 0x04	; 4
 198:	9b b9       	out	0x0b, r25	; 11
 19a:	ef e9       	ldi	r30, 0x9F	; 159
 19c:	ff e0       	ldi	r31, 0x0F	; 15
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCDsendCommand+0x10>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCDsendCommand+0x16>
 1a4:	00 00       	nop
 1a6:	9b b1       	in	r25, 0x0b	; 11
 1a8:	9b 7f       	andi	r25, 0xFB	; 251
 1aa:	9b b9       	out	0x0b, r25	; 11
 1ac:	ef e9       	ldi	r30, 0x9F	; 159
 1ae:	ff e0       	ldi	r31, 0x0F	; 15
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDsendCommand+0x22>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCDsendCommand+0x28>
 1b6:	00 00       	nop
 1b8:	f0 e1       	ldi	r31, 0x10	; 16
 1ba:	8f 9f       	mul	r24, r31
 1bc:	c0 01       	movw	r24, r0
 1be:	11 24       	eor	r1, r1
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	8f e9       	ldi	r24, 0x9F	; 159
 1ca:	9f e0       	ldi	r25, 0x0F	; 15
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDsendCommand+0x3e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCDsendCommand+0x44>
 1d2:	00 00       	nop
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	8b b9       	out	0x0b, r24	; 11
 1da:	ef e9       	ldi	r30, 0x9F	; 159
 1dc:	ff e0       	ldi	r31, 0x0F	; 15
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCDsendCommand+0x50>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCDsendCommand+0x56>
 1e4:	00 00       	nop
 1e6:	08 95       	ret

000001e8 <LCDclr>:
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDsendCommand>
 1ee:	08 95       	ret

000001f0 <LCDstring>:
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 97       	sbiw	r24, 0x00	; 0
 1fa:	69 f0       	breq	.+26     	; 0x216 <LCDstring+0x26>
 1fc:	d6 2f       	mov	r29, r22
 1fe:	8c 01       	movw	r16, r24
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	07 c0       	rjmp	.+14     	; 0x212 <LCDstring+0x22>
 204:	f8 01       	movw	r30, r16
 206:	ec 0f       	add	r30, r28
 208:	f1 1d       	adc	r31, r1
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendChar>
 210:	cf 5f       	subi	r28, 0xFF	; 255
 212:	cd 17       	cp	r28, r29
 214:	b8 f3       	brcs	.-18     	; 0x204 <LCDstring+0x14>
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <LCDGotoXY>:
 220:	62 30       	cpi	r22, 0x02	; 2
 222:	31 f0       	breq	.+12     	; 0x230 <LCDGotoXY+0x10>
 224:	63 30       	cpi	r22, 0x03	; 3
 226:	31 f0       	breq	.+12     	; 0x234 <LCDGotoXY+0x14>
 228:	61 30       	cpi	r22, 0x01	; 1
 22a:	29 f4       	brne	.+10     	; 0x236 <LCDGotoXY+0x16>
 22c:	80 5c       	subi	r24, 0xC0	; 192
 22e:	03 c0       	rjmp	.+6      	; 0x236 <LCDGotoXY+0x16>
 230:	8c 5e       	subi	r24, 0xEC	; 236
 232:	01 c0       	rjmp	.+2      	; 0x236 <LCDGotoXY+0x16>
 234:	8c 5a       	subi	r24, 0xAC	; 172
 236:	80 68       	ori	r24, 0x80	; 128
 238:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDsendCommand>
 23c:	08 95       	ret

0000023e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 24c:	86 2f       	mov	r24, r22
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	0d c0       	rjmp	.+26     	; 0x27e <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 264:	f7 01       	movw	r30, r14
 266:	ec 0f       	add	r30, r28
 268:	fd 1f       	adc	r31, r29
 26a:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 26c:	01 e0       	ldi	r16, 0x01	; 1
 26e:	08 0f       	add	r16, r24
 270:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDsendCommand>
		LCDsendChar(pcc);
 274:	81 2f       	mov	r24, r17
 276:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 27a:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 27c:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 27e:	c8 30       	cpi	r28, 0x08	; 8
 280:	d1 05       	cpc	r29, r1
 282:	80 f3       	brcs	.-32     	; 0x264 <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	08 95       	ret

00000292 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	8f e5       	ldi	r24, 0x5F	; 95
 298:	9a ee       	ldi	r25, 0xEA	; 234
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDinit+0x8>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCDinit+0xe>
 2a0:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2a2:	1b b8       	out	0x0b, r1	; 11
	LCP=0x00;
 2a4:	1b b8       	out	0x0b, r1	; 11
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2a6:	8a b1       	in	r24, 0x0a	; 10
 2a8:	80 6f       	ori	r24, 0xF0	; 240
 2aa:	8a b9       	out	0x0a, r24	; 10
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2ac:	8a b1       	in	r24, 0x0a	; 10
 2ae:	87 60       	ori	r24, 0x07	; 7
 2b0:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2b2:	90 e3       	ldi	r25, 0x30	; 48
 2b4:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	8b b9       	out	0x0b, r24	; 11
 2bc:	ef e9       	ldi	r30, 0x9F	; 159
 2be:	ff e0       	ldi	r31, 0x0F	; 15
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCDinit+0x2e>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCDinit+0x34>
 2c6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	8b 7f       	andi	r24, 0xFB	; 251
 2cc:	8b b9       	out	0x0b, r24	; 11
 2ce:	ef e9       	ldi	r30, 0x9F	; 159
 2d0:	ff e0       	ldi	r31, 0x0F	; 15
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCDinit+0x40>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCDinit+0x46>
 2d8:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2da:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	84 60       	ori	r24, 0x04	; 4
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	8f e9       	ldi	r24, 0x9F	; 159
 2e4:	9f e0       	ldi	r25, 0x0F	; 15
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCDinit+0x54>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCDinit+0x5a>
 2ec:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	8b b9       	out	0x0b, r24	; 11
 2f4:	ef e9       	ldi	r30, 0x9F	; 159
 2f6:	ff e0       	ldi	r31, 0x0F	; 15
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCDinit+0x66>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCDinit+0x6c>
 2fe:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	84 60       	ori	r24, 0x04	; 4
 308:	8b b9       	out	0x0b, r24	; 11
 30a:	8f e9       	ldi	r24, 0x9F	; 159
 30c:	9f e0       	ldi	r25, 0x0F	; 15
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCDinit+0x7c>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCDinit+0x82>
 314:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 316:	8b b1       	in	r24, 0x0b	; 11
 318:	8b 7f       	andi	r24, 0xFB	; 251
 31a:	8b b9       	out	0x0b, r24	; 11
 31c:	ef e9       	ldi	r30, 0x9F	; 159
 31e:	ff e0       	ldi	r31, 0x0F	; 15
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCDinit+0x8e>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCDinit+0x94>
 326:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 338:	0a c0       	rjmp	.+20     	; 0x34e <LCDinit+0xbc>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 33a:	d1 e0       	ldi	r29, 0x01	; 1
 33c:	d6 0f       	add	r29, r22
 33e:	8c 2f       	mov	r24, r28
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	88 59       	subi	r24, 0x98	; 152
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDdefinechar>
		ch=ch+8;
 34a:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 34c:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 34e:	c0 34       	cpi	r28, 0x40	; 64
 350:	a0 f3       	brcs	.-24     	; 0x33a <LCDinit+0xa8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <main>:
#include "main.h"


int main(void)
{
	LCDinit();
 358:	0e 94 49 01 	call	0x292	; 0x292 <LCDinit>
    SEOS_Init();
 35c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <SEOS_Init>
	VENTILADOR_Init();
 360:	0e 94 b0 02 	call	0x560	; 0x560 <VENTILADOR_Init>
	CALEFACTOR_Init();
 364:	0e 94 8a 00 	call	0x114	; 0x114 <CALEFACTOR_Init>
	SENSORTEMP_Init();
 368:	0e 94 bc 01 	call	0x378	; 0x378 <SENSORTEMP_Init>
	SYSTEM_Init();
 36c:	0e 94 18 02 	call	0x430	; 0x430 <SYSTEM_Init>
	sei();
 370:	78 94       	sei
    while (1)
    {
		SEOS_Dispatch_Tasks();
 372:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SEOS_Dispatch_Tasks>
 376:	fd cf       	rjmp	.-6      	; 0x372 <main+0x1a>

00000378 <SENSORTEMP_Init>:


tempType temperature;

void SENSORTEMP_Init(){
	temperature=24;
 378:	88 e1       	ldi	r24, 0x18	; 24
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temperature+0x1>
 380:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <temperature>
	ADC_Init();
 384:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_Init>
 388:	08 95       	ret

0000038a <SENSORTEMP_MeasureTemp>:
	//toma el valor del registro del ADC
	//lo pasa a mV
	//calcula la Temperatura en °C
	//retorna el resultado en tempType
	
	unsigned long aux = ADC_GetData();
 38a:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADC_GetData>
	temperature = aux * ADC_FACTOR; //consigo el voltaje de salida en mV
 38e:	9c 01       	movw	r18, r24
 390:	a8 e8       	ldi	r26, 0x88	; 136
 392:	b3 e1       	ldi	r27, 0x13	; 19
 394:	0e 94 bc 02 	call	0x578	; 0x578 <__umulhisi3>
 398:	9b 01       	movw	r18, r22
 39a:	ac 01       	movw	r20, r24
 39c:	01 2e       	mov	r0, r17
 39e:	1a e0       	ldi	r17, 0x0A	; 10
 3a0:	56 95       	lsr	r21
 3a2:	47 95       	ror	r20
 3a4:	37 95       	ror	r19
 3a6:	27 95       	ror	r18
 3a8:	1a 95       	dec	r17
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <SENSORTEMP_MeasureTemp+0x16>
 3ac:	10 2d       	mov	r17, r0
	//equivalente a hacer (aux*5000UL)/1024
	temperature = temperature/SENSORTEMP_FACTOR; //consigo el valor de la temperatura
 3ae:	ad ec       	ldi	r26, 0xCD	; 205
 3b0:	bc ec       	ldi	r27, 0xCC	; 204
 3b2:	0e 94 bc 02 	call	0x578	; 0x578 <__umulhisi3>
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temperature+0x1>
 3c6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <temperature>
	return temperature;
 3ca:	08 95       	ret

000003cc <SEOS_Init>:
static unsigned char iCont=0;


void SEOS_Init(){
	//configuro Timer1 para interrupciones cada 100ms	
	OCR1A = 6249;
 3cc:	89 e6       	ldi	r24, 0x69	; 105
 3ce:	98 e1       	ldi	r25, 0x18	; 24
 3d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00; //Seteo el timer1 en CTC mode
 3d8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS12); //CTC mode, preescalador en N=256
 3dc:	8c e0       	ldi	r24, 0x0C	; 12
 3de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1<<OCIE1A); //Activo interrupciones de registro OCR01	
 3e2:	ef e6       	ldi	r30, 0x6F	; 111
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	82 60       	ori	r24, 0x02	; 2
 3ea:	80 83       	st	Z, r24
 3ec:	08 95       	ret

000003ee <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks(){
	
	if(FLAG_Sensor==1){ //Esto corre cada 500ms
 3ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <FLAG_Sensor>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	21 f4       	brne	.+8      	; 0x3fe <SEOS_Dispatch_Tasks+0x10>
		SYSTEM_Update(); //toma la temp y actualiza el sistema
 3f6:	0e 94 91 02 	call	0x522	; 0x522 <SYSTEM_Update>
		FLAG_Sensor=0;
 3fa:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <FLAG_Sensor>
 3fe:	08 95       	ret

00000400 <__vector_11>:
	}
}

ISR(TIMER1_COMPA_vect){ //interrupción cada 100ms
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
	if(++iCont==5){
 40c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 416:	85 30       	cpi	r24, 0x05	; 5
 418:	29 f4       	brne	.+10     	; 0x424 <__vector_11+0x24>
		FLAG_Sensor=1;	
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <FLAG_Sensor>
		iCont=0;
 420:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
}
 424:	8f 91       	pop	r24
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <SYSTEM_Init>:
static char texto[14] = "TEMP: 00.0 [C]";

void writeLCD(tempType temp);

void SYSTEM_Init(){
	LCDclr();
 430:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDclr>
 434:	08 95       	ret

00000436 <writeLCD>:
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
}

void writeLCD(tempType temp){
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
	//texto -> "TEMP: xx.y °C"
	temp = temp*10;
 43a:	ac 01       	movw	r20, r24
 43c:	44 0f       	add	r20, r20
 43e:	55 1f       	adc	r21, r21
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	48 0f       	add	r20, r24
 44e:	59 1f       	adc	r21, r25
	texto[6] = '0' + (temp/100) % 10;
 450:	9a 01       	movw	r18, r20
 452:	36 95       	lsr	r19
 454:	27 95       	ror	r18
 456:	36 95       	lsr	r19
 458:	27 95       	ror	r18
 45a:	ab e7       	ldi	r26, 0x7B	; 123
 45c:	b4 e1       	ldi	r27, 0x14	; 20
 45e:	0e 94 bc 02 	call	0x578	; 0x578 <__umulhisi3>
 462:	fc 01       	movw	r30, r24
 464:	f6 95       	lsr	r31
 466:	e7 95       	ror	r30
 468:	9f 01       	movw	r18, r30
 46a:	ad ec       	ldi	r26, 0xCD	; 205
 46c:	bc ec       	ldi	r27, 0xCC	; 204
 46e:	0e 94 bc 02 	call	0x578	; 0x578 <__umulhisi3>
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	9c 01       	movw	r18, r24
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	82 0f       	add	r24, r18
 492:	93 1f       	adc	r25, r19
 494:	9f 01       	movw	r18, r30
 496:	28 1b       	sub	r18, r24
 498:	39 0b       	sbc	r19, r25
 49a:	c9 01       	movw	r24, r18
 49c:	e0 e0       	ldi	r30, 0x00	; 0
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	80 5d       	subi	r24, 0xD0	; 208
 4a2:	86 83       	std	Z+6, r24	; 0x06
	texto[7] = '0' + (temp/10)  % 10;
 4a4:	9a 01       	movw	r18, r20
 4a6:	0e 94 bc 02 	call	0x578	; 0x578 <__umulhisi3>
 4aa:	ec 01       	movw	r28, r24
 4ac:	d6 95       	lsr	r29
 4ae:	c7 95       	ror	r28
 4b0:	d6 95       	lsr	r29
 4b2:	c7 95       	ror	r28
 4b4:	d6 95       	lsr	r29
 4b6:	c7 95       	ror	r28
 4b8:	9e 01       	movw	r18, r28
 4ba:	0e 94 bc 02 	call	0x578	; 0x578 <__umulhisi3>
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	9c 01       	movw	r18, r24
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	82 0f       	add	r24, r18
 4de:	93 1f       	adc	r25, r19
 4e0:	9e 01       	movw	r18, r28
 4e2:	28 1b       	sub	r18, r24
 4e4:	39 0b       	sbc	r19, r25
 4e6:	c9 01       	movw	r24, r18
 4e8:	80 5d       	subi	r24, 0xD0	; 208
 4ea:	87 83       	std	Z+7, r24	; 0x07
	texto[9] = '0' + temp%10;
 4ec:	ce 01       	movw	r24, r28
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	cc 0f       	add	r28, r28
 4f4:	dd 1f       	adc	r29, r29
 4f6:	cc 0f       	add	r28, r28
 4f8:	dd 1f       	adc	r29, r29
 4fa:	cc 0f       	add	r28, r28
 4fc:	dd 1f       	adc	r29, r29
 4fe:	c8 0f       	add	r28, r24
 500:	d9 1f       	adc	r29, r25
 502:	4c 1b       	sub	r20, r28
 504:	5d 0b       	sbc	r21, r29
 506:	40 5d       	subi	r20, 0xD0	; 208
 508:	41 87       	std	Z+9, r20	; 0x09
	LCDGotoXY(0,0);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 10 01 	call	0x220	; 0x220 <LCDGotoXY>
	LCDstring(texto,14);
 512:	6e e0       	ldi	r22, 0x0E	; 14
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDstring>
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <SYSTEM_Update>:
}

//Toma la temperatura del sensor y la actualiza en el LCD
//Prende y apaga el calefactor en caso de ser necesario
void SYSTEM_Update(){
	temperatura = SENSORTEMP_MeasureTemp();
 522:	0e 94 c5 01 	call	0x38a	; 0x38a <SENSORTEMP_MeasureTemp>
 526:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <temperatura+0x1>
 52a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <temperatura>
	if(temperatura>MAX_T){
 52e:	49 97       	sbiw	r24, 0x19	; 25
 530:	18 f0       	brcs	.+6      	; 0x538 <SYSTEM_Update+0x16>
		VENTILADOR_TurnOn();
 532:	0e 94 b8 02 	call	0x570	; 0x570 <VENTILADOR_TurnOn>
 536:	02 c0       	rjmp	.+4      	; 0x53c <SYSTEM_Update+0x1a>
	}
	else{
		VENTILADOR_TurnOff();
 538:	0e 94 b4 02 	call	0x568	; 0x568 <VENTILADOR_TurnOff>
	}
	if(temperatura<MIN_T){
 53c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <temperatura>
 540:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <temperatura+0x1>
 544:	41 97       	sbiw	r24, 0x11	; 17
 546:	18 f4       	brcc	.+6      	; 0x54e <SYSTEM_Update+0x2c>
		CALEFACTOR_TurnOn();
 548:	0e 94 92 00 	call	0x124	; 0x124 <CALEFACTOR_TurnOn>
 54c:	02 c0       	rjmp	.+4      	; 0x552 <SYSTEM_Update+0x30>
	}
	else{
		CALEFACTOR_TurnOff();
 54e:	0e 94 8e 00 	call	0x11c	; 0x11c <CALEFACTOR_TurnOff>
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
 552:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <temperatura>
 556:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <temperatura+0x1>
 55a:	0e 94 1b 02 	call	0x436	; 0x436 <writeLCD>
 55e:	08 95       	ret

00000560 <VENTILADOR_Init>:

#include "Ventilador.h"

void VENTILADOR_Init(){
	//setea pin pb0 como escritura
	DDRB |= (1<<PORTB0);
 560:	84 b1       	in	r24, 0x04	; 4
 562:	81 60       	ori	r24, 0x01	; 1
 564:	84 b9       	out	0x04, r24	; 4
 566:	08 95       	ret

00000568 <VENTILADOR_TurnOff>:

}

void VENTILADOR_TurnOff(){
	//apaga el led conecatdo a pb0
	PORTB &= ~(1<<PORTB0);
 568:	85 b1       	in	r24, 0x05	; 5
 56a:	8e 7f       	andi	r24, 0xFE	; 254
 56c:	85 b9       	out	0x05, r24	; 5
 56e:	08 95       	ret

00000570 <VENTILADOR_TurnOn>:
}

void VENTILADOR_TurnOn(){
	//prende el led conectado a pb0
	PORTB |= (1<<PORTB0);
 570:	85 b1       	in	r24, 0x05	; 5
 572:	81 60       	ori	r24, 0x01	; 1
 574:	85 b9       	out	0x05, r24	; 5
 576:	08 95       	ret

00000578 <__umulhisi3>:
 578:	a2 9f       	mul	r26, r18
 57a:	b0 01       	movw	r22, r0
 57c:	b3 9f       	mul	r27, r19
 57e:	c0 01       	movw	r24, r0
 580:	a3 9f       	mul	r26, r19
 582:	70 0d       	add	r23, r0
 584:	81 1d       	adc	r24, r1
 586:	11 24       	eor	r1, r1
 588:	91 1d       	adc	r25, r1
 58a:	b2 9f       	mul	r27, r18
 58c:	70 0d       	add	r23, r0
 58e:	81 1d       	adc	r24, r1
 590:	11 24       	eor	r1, r1
 592:	91 1d       	adc	r25, r1
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
