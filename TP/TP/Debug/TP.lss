
TP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000005fa  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  0000069c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180f  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7c  00000000  00000000  00002103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7f  00000000  00000000  00002c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072a  00000000  00000000  00003dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea0  00000000  00000000  000044ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000538e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_11>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ea ef       	ldi	r30, 0xFA	; 250
  bc:	f5 e0       	ldi	r31, 0x05	; 5
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ae 30       	cpi	r26, 0x0E	; 14
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	ae e0       	ldi	r26, 0x0E	; 14
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a4 31       	cpi	r26, 0x14	; 20
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  de:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_Init>:

#include "ADC.h"

void ADC_Init(){
	//inicializa el ADC
	ADMUX=0x00; //Vref -> AREF = 5V , Right justified, pin ADC0
  e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //Enable ADC w/ prescaler 128
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC0D); //para que consuma menos el MCU deshabilitamos el Digital Input del puerto
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  f6:	08 95       	ret

000000f8 <ADC_GetData>:
	//Convierte la entrada del pin ADC0 y la pasa al registro
	//retorna el valor del registro
	//con este valor, el sensortemp calcula el voltaje
	//y luego la temperatura
	
	ADCSRA |= (1<<ADSC); //Inicializo conversion
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	while(((ADCSRA & (1<<ADIF)) == 0)); //se bloquea hasta que termina la conversión
 102:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 106:	84 ff       	sbrs	r24, 4
 108:	fc cf       	rjmp	.-8      	; 0x102 <ADC_GetData+0xa>
	//to-do? timeout para evitar bloqueo?
	ADCSRA |= (1<<ADIF); //borra flag (debe borrarse si se usa polling)
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 61       	ori	r24, 0x10	; 16
 112:	80 83       	st	Z, r24
	
	return ADC; //retorno el valor obtenido en mi ADC	
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11c:	08 95       	ret

0000011e <CALEFACTOR_Init>:
#include "Calefactor.h"


void CALEFACTOR_Init(){
	//setea pin pb1 como escritura
	DDRB |= (1<<PORTB1);
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	82 60       	ori	r24, 0x02	; 2
 122:	84 b9       	out	0x04, r24	; 4
 124:	08 95       	ret

00000126 <CALEFACTOR_TurnOff>:
}

void CALEFACTOR_TurnOff(){
	//apaga el led conecatdo a pb1
	PORTB &= ~(1<<PORTB1);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	08 95       	ret

0000012e <CALEFACTOR_TurnOn>:
}

void CALEFACTOR_TurnOn(){
	PORTB |= (1<<PORTB1);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	82 60       	ori	r24, 0x02	; 2
 132:	85 b9       	out	0x05, r24	; 5
 134:	08 95       	ret

00000136 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 136:	98 2f       	mov	r25, r24
 138:	90 7f       	andi	r25, 0xF0	; 240
 13a:	9b b9       	out	0x0b, r25	; 11
 13c:	9b b1       	in	r25, 0x0b	; 11
 13e:	91 60       	ori	r25, 0x01	; 1
 140:	9b b9       	out	0x0b, r25	; 11
 142:	9b b1       	in	r25, 0x0b	; 11
 144:	94 60       	ori	r25, 0x04	; 4
 146:	9b b9       	out	0x0b, r25	; 11
 148:	25 ed       	ldi	r18, 0xD5	; 213
 14a:	2a 95       	dec	r18
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDsendChar+0x14>
 14e:	00 00       	nop
 150:	9b b1       	in	r25, 0x0b	; 11
 152:	9b 7f       	andi	r25, 0xFB	; 251
 154:	9b b9       	out	0x0b, r25	; 11
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	9e 7f       	andi	r25, 0xFE	; 254
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	95 ed       	ldi	r25, 0xD5	; 213
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDsendChar+0x28>
 162:	00 00       	nop
 164:	20 e1       	ldi	r18, 0x10	; 16
 166:	82 9f       	mul	r24, r18
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	81 60       	ori	r24, 0x01	; 1
 172:	8b b9       	out	0x0b, r24	; 11
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	84 60       	ori	r24, 0x04	; 4
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	85 ed       	ldi	r24, 0xD5	; 213
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDsendChar+0x46>
 180:	00 00       	nop
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	8b b9       	out	0x0b, r24	; 11
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	95 ed       	ldi	r25, 0xD5	; 213
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDsendChar+0x5a>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <LCDsendCommand>:
 198:	98 2f       	mov	r25, r24
 19a:	90 7f       	andi	r25, 0xF0	; 240
 19c:	9b b9       	out	0x0b, r25	; 11
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	94 60       	ori	r25, 0x04	; 4
 1a2:	9b b9       	out	0x0b, r25	; 11
 1a4:	ef e9       	ldi	r30, 0x9F	; 159
 1a6:	ff e0       	ldi	r31, 0x0F	; 15
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDsendCommand+0x10>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCDsendCommand+0x16>
 1ae:	00 00       	nop
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	9b 7f       	andi	r25, 0xFB	; 251
 1b4:	9b b9       	out	0x0b, r25	; 11
 1b6:	ef e9       	ldi	r30, 0x9F	; 159
 1b8:	ff e0       	ldi	r31, 0x0F	; 15
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDsendCommand+0x22>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCDsendCommand+0x28>
 1c0:	00 00       	nop
 1c2:	f0 e1       	ldi	r31, 0x10	; 16
 1c4:	8f 9f       	mul	r24, r31
 1c6:	c0 01       	movw	r24, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDsendCommand+0x3e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCDsendCommand+0x44>
 1dc:	00 00       	nop
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	ef e9       	ldi	r30, 0x9F	; 159
 1e6:	ff e0       	ldi	r31, 0x0F	; 15
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDsendCommand+0x50>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCDsendCommand+0x56>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
 1f8:	08 95       	ret

000001fa <LCDstring>:
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	69 f0       	breq	.+26     	; 0x220 <LCDstring+0x26>
 206:	d6 2f       	mov	r29, r22
 208:	8c 01       	movw	r16, r24
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	07 c0       	rjmp	.+14     	; 0x21c <LCDstring+0x22>
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	f1 1d       	adc	r31, r1
 214:	80 81       	ld	r24, Z
 216:	0e 94 9b 00 	call	0x136	; 0x136 <LCDsendChar>
 21a:	cf 5f       	subi	r28, 0xFF	; 255
 21c:	cd 17       	cp	r28, r29
 21e:	b8 f3       	brcs	.-18     	; 0x20e <LCDstring+0x14>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <LCDGotoXY>:
 22a:	62 30       	cpi	r22, 0x02	; 2
 22c:	31 f0       	breq	.+12     	; 0x23a <LCDGotoXY+0x10>
 22e:	63 30       	cpi	r22, 0x03	; 3
 230:	31 f0       	breq	.+12     	; 0x23e <LCDGotoXY+0x14>
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	29 f4       	brne	.+10     	; 0x240 <LCDGotoXY+0x16>
 236:	80 5c       	subi	r24, 0xC0	; 192
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCDGotoXY+0x16>
 23a:	8c 5e       	subi	r24, 0xEC	; 236
 23c:	01 c0       	rjmp	.+2      	; 0x240 <LCDGotoXY+0x16>
 23e:	8c 5a       	subi	r24, 0xAC	; 172
 240:	80 68       	ori	r24, 0x80	; 128
 242:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
 246:	08 95       	ret

00000248 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 256:	86 2f       	mov	r24, r22
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	0d c0       	rjmp	.+26     	; 0x288 <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 26e:	f7 01       	movw	r30, r14
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 276:	01 e0       	ldi	r16, 0x01	; 1
 278:	08 0f       	add	r16, r24
 27a:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
		LCDsendChar(pcc);
 27e:	81 2f       	mov	r24, r17
 280:	0e 94 9b 00 	call	0x136	; 0x136 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 284:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 286:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 288:	c8 30       	cpi	r28, 0x08	; 8
 28a:	d1 05       	cpc	r29, r1
 28c:	80 f3       	brcs	.-32     	; 0x26e <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	08 95       	ret

0000029c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	8f e5       	ldi	r24, 0x5F	; 95
 2a2:	9a ee       	ldi	r25, 0xEA	; 234
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCDinit+0x8>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCDinit+0xe>
 2aa:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2ac:	1b b8       	out	0x0b, r1	; 11
	LCP=0x00;
 2ae:	1b b8       	out	0x0b, r1	; 11
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	80 6f       	ori	r24, 0xF0	; 240
 2b4:	8a b9       	out	0x0a, r24	; 10
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2b6:	8a b1       	in	r24, 0x0a	; 10
 2b8:	87 60       	ori	r24, 0x07	; 7
 2ba:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2bc:	90 e3       	ldi	r25, 0x30	; 48
 2be:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2c0:	8b b1       	in	r24, 0x0b	; 11
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	8b b9       	out	0x0b, r24	; 11
 2c6:	ef e9       	ldi	r30, 0x9F	; 159
 2c8:	ff e0       	ldi	r31, 0x0F	; 15
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCDinit+0x2e>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCDinit+0x34>
 2d0:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	8b 7f       	andi	r24, 0xFB	; 251
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	ef e9       	ldi	r30, 0x9F	; 159
 2da:	ff e0       	ldi	r31, 0x0F	; 15
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCDinit+0x40>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCDinit+0x46>
 2e2:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2e4:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	8b b9       	out	0x0b, r24	; 11
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDinit+0x54>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCDinit+0x5a>
 2f6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2f8:	8b b1       	in	r24, 0x0b	; 11
 2fa:	8b 7f       	andi	r24, 0xFB	; 251
 2fc:	8b b9       	out	0x0b, r24	; 11
 2fe:	ef e9       	ldi	r30, 0x9F	; 159
 300:	ff e0       	ldi	r31, 0x0F	; 15
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCDinit+0x66>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCDinit+0x6c>
 308:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	84 60       	ori	r24, 0x04	; 4
 312:	8b b9       	out	0x0b, r24	; 11
 314:	8f e9       	ldi	r24, 0x9F	; 159
 316:	9f e0       	ldi	r25, 0x0F	; 15
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDinit+0x7c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCDinit+0x82>
 31e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8b 7f       	andi	r24, 0xFB	; 251
 324:	8b b9       	out	0x0b, r24	; 11
 326:	ef e9       	ldi	r30, 0x9F	; 159
 328:	ff e0       	ldi	r31, 0x0F	; 15
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCDinit+0x8e>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCDinit+0x94>
 330:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 332:	88 e2       	ldi	r24, 0x28	; 40
 334:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 342:	0a c0       	rjmp	.+20     	; 0x358 <LCDinit+0xbc>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 344:	d1 e0       	ldi	r29, 0x01	; 1
 346:	d6 0f       	add	r29, r22
 348:	8c 2f       	mov	r24, r28
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	88 59       	subi	r24, 0x98	; 152
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	0e 94 24 01 	call	0x248	; 0x248 <LCDdefinechar>
		ch=ch+8;
 354:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 356:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 358:	c0 34       	cpi	r28, 0x40	; 64
 35a:	a0 f3       	brcs	.-24     	; 0x344 <LCDinit+0xa8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <main>:
#include "main.h"


int main(void)
{
	LCDinit();
 362:	0e 94 4e 01 	call	0x29c	; 0x29c <LCDinit>
    SEOS_Init();
 366:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <SEOS_Init>
	VENTILADOR_Init();
 36a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <VENTILADOR_Init>
	CALEFACTOR_Init();
 36e:	0e 94 8f 00 	call	0x11e	; 0x11e <CALEFACTOR_Init>
	SENSORTEMP_Init();
 372:	0e 94 c1 01 	call	0x382	; 0x382 <SENSORTEMP_Init>
	SYSTEM_Init();
 376:	0e 94 a3 02 	call	0x546	; 0x546 <SYSTEM_Init>
	sei();
 37a:	78 94       	sei
    while (1)
    {
		SEOS_Dispatch_Tasks();
 37c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SEOS_Dispatch_Tasks>
 380:	fd cf       	rjmp	.-6      	; 0x37c <main+0x1a>

00000382 <SENSORTEMP_Init>:




void SENSORTEMP_Init(){
	ADC_Init();
 382:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_Init>
 386:	08 95       	ret

00000388 <SENSORTEMP_MeasureTemp>:
	//lo pasa a mV
	//calcula la Temperatura en °C
	//retorna el resultado en tempType
	tempType temperature;
	
	unsigned long aux = ADC_GetData();
 388:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADC_GetData>
	temperature = (tempType)aux * ADC_FACTOR; //consigo el voltaje de salida en mV
 38c:	9c 01       	movw	r18, r24
 38e:	a8 e8       	ldi	r26, 0x88	; 136
 390:	b3 e1       	ldi	r27, 0x13	; 19
 392:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 396:	9b 01       	movw	r18, r22
 398:	ac 01       	movw	r20, r24
 39a:	01 2e       	mov	r0, r17
 39c:	1a e0       	ldi	r17, 0x0A	; 10
 39e:	56 95       	lsr	r21
 3a0:	47 95       	ror	r20
 3a2:	37 95       	ror	r19
 3a4:	27 95       	ror	r18
 3a6:	1a 95       	dec	r17
 3a8:	d1 f7       	brne	.-12     	; 0x39e <SENSORTEMP_MeasureTemp+0x16>
 3aa:	10 2d       	mov	r17, r0
	//equivalente a hacer (aux*5000UL)/1024
	temperature = temperature/SENSORTEMP_FACTOR; //consigo el valor de la temperatura
 3ac:	ad ec       	ldi	r26, 0xCD	; 205
 3ae:	bc ec       	ldi	r27, 0xCC	; 204
 3b0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
		aux=temperature;
		temperature = ((temperature-aux>0.33 && temperature-aux<0.66) ? aux+0.5 : (temperature-aux>0.66) ? aux+1:aux);
	#endif
	*/
	return temperature;
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	08 95       	ret

000003c2 <SEOS_Init>:
static unsigned char iCont=0;


void SEOS_Init(){
	//configuro Timer1 para interrupciones cada 100ms	
	OCR1A = 6249;
 3c2:	89 e6       	ldi	r24, 0x69	; 105
 3c4:	98 e1       	ldi	r25, 0x18	; 24
 3c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00; //Seteo el timer1 en CTC mode
 3ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS12); //CTC mode, preescalador en N=256
 3d2:	8c e0       	ldi	r24, 0x0C	; 12
 3d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1<<OCIE1A); //Activo interrupciones de registro OCR01	
 3d8:	ef e6       	ldi	r30, 0x6F	; 111
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
 3e2:	08 95       	ret

000003e4 <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks(){
	
	if(FLAG_Sensor==1){ //Esto corre cada 500ms
 3e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <FLAG_Sensor>
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <SEOS_Dispatch_Tasks+0x10>
		SYSTEM_Update(); //toma la temp y actualiza el sistema
 3ec:	0e 94 aa 02 	call	0x554	; 0x554 <SYSTEM_Update>
		FLAG_Sensor=0;
 3f0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <FLAG_Sensor>
 3f4:	08 95       	ret

000003f6 <__vector_11>:
	}
}

ISR(TIMER1_COMPA_vect){ //interrupción cada 100ms
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
	if(++iCont==5){
 402:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 406:	8f 5f       	subi	r24, 0xFF	; 255
 408:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 40c:	85 30       	cpi	r24, 0x05	; 5
 40e:	29 f4       	brne	.+10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		FLAG_Sensor=1;	
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <FLAG_Sensor>
		iCont=0;
 416:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
}
 41a:	8f 91       	pop	r24
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <writeLCD>:
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
}

static void writeLCD(tempType temp){
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
	//texto -> "TEMP: xx.y °C"
	temp = temp*100;
 42a:	24 e6       	ldi	r18, 0x64	; 100
 42c:	28 9f       	mul	r18, r24
 42e:	a0 01       	movw	r20, r0
 430:	29 9f       	mul	r18, r25
 432:	50 0d       	add	r21, r0
 434:	11 24       	eor	r1, r1
	texto[6] = '0' + ((unsigned short)temp/1000) % 10;
 436:	9a 01       	movw	r18, r20
 438:	36 95       	lsr	r19
 43a:	27 95       	ror	r18
 43c:	36 95       	lsr	r19
 43e:	27 95       	ror	r18
 440:	36 95       	lsr	r19
 442:	27 95       	ror	r18
 444:	a5 ec       	ldi	r26, 0xC5	; 197
 446:	b0 e2       	ldi	r27, 0x20	; 32
 448:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 44c:	fc 01       	movw	r30, r24
 44e:	f2 95       	swap	r31
 450:	e2 95       	swap	r30
 452:	ef 70       	andi	r30, 0x0F	; 15
 454:	ef 27       	eor	r30, r31
 456:	ff 70       	andi	r31, 0x0F	; 15
 458:	ef 27       	eor	r30, r31
 45a:	9f 01       	movw	r18, r30
 45c:	ad ec       	ldi	r26, 0xCD	; 205
 45e:	bc ec       	ldi	r27, 0xCC	; 204
 460:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 464:	96 95       	lsr	r25
 466:	87 95       	ror	r24
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	9c 01       	movw	r18, r24
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	9f 01       	movw	r18, r30
 488:	28 1b       	sub	r18, r24
 48a:	39 0b       	sbc	r19, r25
 48c:	c9 01       	movw	r24, r18
 48e:	e0 e0       	ldi	r30, 0x00	; 0
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	80 5d       	subi	r24, 0xD0	; 208
 494:	86 83       	std	Z+6, r24	; 0x06
	texto[7] = '0' + ((unsigned short)temp/100)  % 10;
 496:	9a 01       	movw	r18, r20
 498:	36 95       	lsr	r19
 49a:	27 95       	ror	r18
 49c:	36 95       	lsr	r19
 49e:	27 95       	ror	r18
 4a0:	ab e7       	ldi	r26, 0x7B	; 123
 4a2:	b4 e1       	ldi	r27, 0x14	; 20
 4a4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 4a8:	ec 01       	movw	r28, r24
 4aa:	d6 95       	lsr	r29
 4ac:	c7 95       	ror	r28
 4ae:	9e 01       	movw	r18, r28
 4b0:	ad ec       	ldi	r26, 0xCD	; 205
 4b2:	bc ec       	ldi	r27, 0xCC	; 204
 4b4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	9c 01       	movw	r18, r24
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	82 0f       	add	r24, r18
 4d8:	93 1f       	adc	r25, r19
 4da:	9e 01       	movw	r18, r28
 4dc:	28 1b       	sub	r18, r24
 4de:	39 0b       	sbc	r19, r25
 4e0:	c9 01       	movw	r24, r18
 4e2:	80 5d       	subi	r24, 0xD0	; 208
 4e4:	87 83       	std	Z+7, r24	; 0x07
	texto[9] = '0' + (unsigned short)temp/10     % 10;
 4e6:	9a 01       	movw	r18, r20
 4e8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 4ec:	ac 01       	movw	r20, r24
 4ee:	56 95       	lsr	r21
 4f0:	47 95       	ror	r20
 4f2:	56 95       	lsr	r21
 4f4:	47 95       	ror	r20
 4f6:	56 95       	lsr	r21
 4f8:	47 95       	ror	r20
 4fa:	9a 01       	movw	r18, r20
 4fc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	9c 01       	movw	r18, r24
 50e:	22 0f       	add	r18, r18
 510:	33 1f       	adc	r19, r19
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	82 0f       	add	r24, r18
 520:	93 1f       	adc	r25, r19
 522:	9a 01       	movw	r18, r20
 524:	28 1b       	sub	r18, r24
 526:	39 0b       	sbc	r19, r25
 528:	c9 01       	movw	r24, r18
 52a:	80 5d       	subi	r24, 0xD0	; 208
 52c:	81 87       	std	Z+9, r24	; 0x09
	//texto[10] = '0' + (unsigned short)temp        %10;
	LCDGotoXY(0,0);
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 15 01 	call	0x22a	; 0x22a <LCDGotoXY>
	LCDstring(texto,14);
 536:	6e e0       	ldi	r22, 0x0E	; 14
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDstring>
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <SYSTEM_Init>:


static void writeLCD(tempType temp);

void SYSTEM_Init(){
	ventilador_on=0;
 546:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ventilador_on>
	calefactor_on=0;
 54a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <calefactor_on>
	LCDclr();
 54e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
 552:	08 95       	ret

00000554 <SYSTEM_Update>:
}

//Toma la temperatura del sensor y la actualiza en el LCD
//Prende y apaga el calefactor en caso de ser necesario
void SYSTEM_Update(){
	temperatura = SENSORTEMP_MeasureTemp();
 554:	0e 94 c4 01 	call	0x388	; 0x388 <SENSORTEMP_MeasureTemp>
 558:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temperatura+0x1>
 55c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <temperatura>
	if(temperatura>MAX_T){
 560:	89 31       	cpi	r24, 0x19	; 25
 562:	91 05       	cpc	r25, r1
 564:	50 f0       	brcs	.+20     	; 0x57a <SYSTEM_Update+0x26>
		if(!ventilador_on){
 566:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ventilador_on>
 56a:	81 11       	cpse	r24, r1
 56c:	22 c0       	rjmp	.+68     	; 0x5b2 <SYSTEM_Update+0x5e>
			VENTILADOR_TurnOn();
 56e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <VENTILADOR_TurnOn>
			ventilador_on=1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ventilador_on>
 578:	1c c0       	rjmp	.+56     	; 0x5b2 <SYSTEM_Update+0x5e>
		}
	}
	else if(temperatura<MIN_T){
 57a:	41 97       	sbiw	r24, 0x11	; 17
 57c:	50 f4       	brcc	.+20     	; 0x592 <SYSTEM_Update+0x3e>
		if(!calefactor_on){
 57e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <calefactor_on>
 582:	81 11       	cpse	r24, r1
 584:	16 c0       	rjmp	.+44     	; 0x5b2 <SYSTEM_Update+0x5e>
			CALEFACTOR_TurnOn();
 586:	0e 94 97 00 	call	0x12e	; 0x12e <CALEFACTOR_TurnOn>
			calefactor_on=1;
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <calefactor_on>
 590:	10 c0       	rjmp	.+32     	; 0x5b2 <SYSTEM_Update+0x5e>
		}
	}
	else{
		if(calefactor_on){
 592:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <calefactor_on>
 596:	88 23       	and	r24, r24
 598:	21 f0       	breq	.+8      	; 0x5a2 <SYSTEM_Update+0x4e>
			CALEFACTOR_TurnOff();
 59a:	0e 94 93 00 	call	0x126	; 0x126 <CALEFACTOR_TurnOff>
			calefactor_on=0;
 59e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <calefactor_on>
		}	
		if(ventilador_on){
 5a2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ventilador_on>
 5a6:	88 23       	and	r24, r24
 5a8:	21 f0       	breq	.+8      	; 0x5b2 <SYSTEM_Update+0x5e>
			VENTILADOR_TurnOff();
 5aa:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <VENTILADOR_TurnOff>
			ventilador_on=0;
 5ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ventilador_on>
		}
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
 5b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <temperatura>
 5b6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <temperatura+0x1>
 5ba:	0e 94 13 02 	call	0x426	; 0x426 <writeLCD>
 5be:	08 95       	ret

000005c0 <VENTILADOR_Init>:

#include "Ventilador.h"

void VENTILADOR_Init(){
	//setea pin pb0 como escritura
	DDRB |= (1<<PORTB0);
 5c0:	84 b1       	in	r24, 0x04	; 4
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	84 b9       	out	0x04, r24	; 4
 5c6:	08 95       	ret

000005c8 <VENTILADOR_TurnOff>:

}

void VENTILADOR_TurnOff(){
	//apaga el led conecatdo a pb0
	PORTB &= ~(1<<PORTB0);
 5c8:	85 b1       	in	r24, 0x05	; 5
 5ca:	8e 7f       	andi	r24, 0xFE	; 254
 5cc:	85 b9       	out	0x05, r24	; 5
 5ce:	08 95       	ret

000005d0 <VENTILADOR_TurnOn>:
}

void VENTILADOR_TurnOn(){
	//prende el led conectado a pb0
	PORTB |= (1<<PORTB0);
 5d0:	85 b1       	in	r24, 0x05	; 5
 5d2:	81 60       	ori	r24, 0x01	; 1
 5d4:	85 b9       	out	0x05, r24	; 5
 5d6:	08 95       	ret

000005d8 <__umulhisi3>:
 5d8:	a2 9f       	mul	r26, r18
 5da:	b0 01       	movw	r22, r0
 5dc:	b3 9f       	mul	r27, r19
 5de:	c0 01       	movw	r24, r0
 5e0:	a3 9f       	mul	r26, r19
 5e2:	70 0d       	add	r23, r0
 5e4:	81 1d       	adc	r24, r1
 5e6:	11 24       	eor	r1, r1
 5e8:	91 1d       	adc	r25, r1
 5ea:	b2 9f       	mul	r27, r18
 5ec:	70 0d       	add	r23, r0
 5ee:	81 1d       	adc	r24, r1
 5f0:	11 24       	eor	r1, r1
 5f2:	91 1d       	adc	r25, r1
 5f4:	08 95       	ret

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
