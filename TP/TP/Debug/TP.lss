
TP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000097c  00000a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010e  0080010e  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017f2  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba9  00000000  00000000  0000246a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d49  00000000  00000000  00003013  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00003d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e7e  00000000  00000000  00004829  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000056a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_11>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f9 e0       	ldi	r31, 0x09	; 9
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ae 30       	cpi	r26, 0x0E	; 14
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	ae e0       	ldi	r26, 0x0E	; 14
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a8 31       	cpi	r26, 0x18	; 24
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  de:	0c 94 bc 04 	jmp	0x978	; 0x978 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_Init>:

#include "ADC.h"

void ADC_Init(){
	//inicializa el ADC
	ADMUX=0x00; //Vref -> AREF = 5V , Right justified, pin ADC0
  e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //Enable ADC w/ prescaler 128
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC0D); //para que consuma menos el MCU deshabilitamos el Digital Input del puerto
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  f6:	08 95       	ret

000000f8 <ADC_GetData>:
	//Convierte la entrada del pin ADC0 y la pasa al registro
	//retorna el valor del registro
	//con este valor, el sensortemp calcula el voltaje
	//y luego la temperatura
	
	ADCSRA |= (1<<ADSC); //Inicializo conversion
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	while(((ADCSRA & (1<<ADIF)) == 0)); //se bloquea hasta que termina la conversión
 102:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 106:	84 ff       	sbrs	r24, 4
 108:	fc cf       	rjmp	.-8      	; 0x102 <ADC_GetData+0xa>
	//to-do? timeout para evitar bloqueo?
	ADCSRA |= (1<<ADIF); //borra flag (debe borrarse si se usa polling)
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 61       	ori	r24, 0x10	; 16
 112:	80 83       	st	Z, r24
	
	return ADC; //retorno el valor obtenido en mi ADC	
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11c:	08 95       	ret

0000011e <CALEFACTOR_Init>:
#include "Calefactor.h"


void CALEFACTOR_Init(){
	//setea pin pb1 como escritura
	DDRB |= (1<<PORTB1);
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	82 60       	ori	r24, 0x02	; 2
 122:	84 b9       	out	0x04, r24	; 4
 124:	08 95       	ret

00000126 <CALEFACTOR_TurnOff>:
}

void CALEFACTOR_TurnOff(){
	//apaga el led conecatdo a pb1
	PORTB &= ~(1<<PORTB1);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	08 95       	ret

0000012e <CALEFACTOR_TurnOn>:
}

void CALEFACTOR_TurnOn(){
	PORTB |= (1<<PORTB1);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	82 60       	ori	r24, 0x02	; 2
 132:	85 b9       	out	0x05, r24	; 5
 134:	08 95       	ret

00000136 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 136:	98 2f       	mov	r25, r24
 138:	90 7f       	andi	r25, 0xF0	; 240
 13a:	9b b9       	out	0x0b, r25	; 11
 13c:	9b b1       	in	r25, 0x0b	; 11
 13e:	91 60       	ori	r25, 0x01	; 1
 140:	9b b9       	out	0x0b, r25	; 11
 142:	9b b1       	in	r25, 0x0b	; 11
 144:	94 60       	ori	r25, 0x04	; 4
 146:	9b b9       	out	0x0b, r25	; 11
 148:	25 ed       	ldi	r18, 0xD5	; 213
 14a:	2a 95       	dec	r18
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDsendChar+0x14>
 14e:	00 00       	nop
 150:	9b b1       	in	r25, 0x0b	; 11
 152:	9b 7f       	andi	r25, 0xFB	; 251
 154:	9b b9       	out	0x0b, r25	; 11
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	9e 7f       	andi	r25, 0xFE	; 254
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	95 ed       	ldi	r25, 0xD5	; 213
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDsendChar+0x28>
 162:	00 00       	nop
 164:	20 e1       	ldi	r18, 0x10	; 16
 166:	82 9f       	mul	r24, r18
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	81 60       	ori	r24, 0x01	; 1
 172:	8b b9       	out	0x0b, r24	; 11
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	84 60       	ori	r24, 0x04	; 4
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	85 ed       	ldi	r24, 0xD5	; 213
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDsendChar+0x46>
 180:	00 00       	nop
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	8b b9       	out	0x0b, r24	; 11
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	95 ed       	ldi	r25, 0xD5	; 213
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDsendChar+0x5a>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <LCDsendCommand>:
 198:	98 2f       	mov	r25, r24
 19a:	90 7f       	andi	r25, 0xF0	; 240
 19c:	9b b9       	out	0x0b, r25	; 11
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	94 60       	ori	r25, 0x04	; 4
 1a2:	9b b9       	out	0x0b, r25	; 11
 1a4:	ef e9       	ldi	r30, 0x9F	; 159
 1a6:	ff e0       	ldi	r31, 0x0F	; 15
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDsendCommand+0x10>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCDsendCommand+0x16>
 1ae:	00 00       	nop
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	9b 7f       	andi	r25, 0xFB	; 251
 1b4:	9b b9       	out	0x0b, r25	; 11
 1b6:	ef e9       	ldi	r30, 0x9F	; 159
 1b8:	ff e0       	ldi	r31, 0x0F	; 15
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDsendCommand+0x22>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCDsendCommand+0x28>
 1c0:	00 00       	nop
 1c2:	f0 e1       	ldi	r31, 0x10	; 16
 1c4:	8f 9f       	mul	r24, r31
 1c6:	c0 01       	movw	r24, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDsendCommand+0x3e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCDsendCommand+0x44>
 1dc:	00 00       	nop
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	ef e9       	ldi	r30, 0x9F	; 159
 1e6:	ff e0       	ldi	r31, 0x0F	; 15
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDsendCommand+0x50>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCDsendCommand+0x56>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
 1f8:	08 95       	ret

000001fa <LCDstring>:
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	69 f0       	breq	.+26     	; 0x220 <LCDstring+0x26>
 206:	d6 2f       	mov	r29, r22
 208:	8c 01       	movw	r16, r24
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	07 c0       	rjmp	.+14     	; 0x21c <LCDstring+0x22>
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	f1 1d       	adc	r31, r1
 214:	80 81       	ld	r24, Z
 216:	0e 94 9b 00 	call	0x136	; 0x136 <LCDsendChar>
 21a:	cf 5f       	subi	r28, 0xFF	; 255
 21c:	cd 17       	cp	r28, r29
 21e:	b8 f3       	brcs	.-18     	; 0x20e <LCDstring+0x14>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <LCDGotoXY>:
 22a:	62 30       	cpi	r22, 0x02	; 2
 22c:	31 f0       	breq	.+12     	; 0x23a <LCDGotoXY+0x10>
 22e:	63 30       	cpi	r22, 0x03	; 3
 230:	31 f0       	breq	.+12     	; 0x23e <LCDGotoXY+0x14>
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	29 f4       	brne	.+10     	; 0x240 <LCDGotoXY+0x16>
 236:	80 5c       	subi	r24, 0xC0	; 192
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCDGotoXY+0x16>
 23a:	8c 5e       	subi	r24, 0xEC	; 236
 23c:	01 c0       	rjmp	.+2      	; 0x240 <LCDGotoXY+0x16>
 23e:	8c 5a       	subi	r24, 0xAC	; 172
 240:	80 68       	ori	r24, 0x80	; 128
 242:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
 246:	08 95       	ret

00000248 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 256:	86 2f       	mov	r24, r22
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	0d c0       	rjmp	.+26     	; 0x288 <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 26e:	f7 01       	movw	r30, r14
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 276:	01 e0       	ldi	r16, 0x01	; 1
 278:	08 0f       	add	r16, r24
 27a:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
		LCDsendChar(pcc);
 27e:	81 2f       	mov	r24, r17
 280:	0e 94 9b 00 	call	0x136	; 0x136 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 284:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 286:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 288:	c8 30       	cpi	r28, 0x08	; 8
 28a:	d1 05       	cpc	r29, r1
 28c:	80 f3       	brcs	.-32     	; 0x26e <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	08 95       	ret

0000029c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	8f e5       	ldi	r24, 0x5F	; 95
 2a2:	9a ee       	ldi	r25, 0xEA	; 234
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCDinit+0x8>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCDinit+0xe>
 2aa:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2ac:	1b b8       	out	0x0b, r1	; 11
	LCP=0x00;
 2ae:	1b b8       	out	0x0b, r1	; 11
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	80 6f       	ori	r24, 0xF0	; 240
 2b4:	8a b9       	out	0x0a, r24	; 10
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2b6:	8a b1       	in	r24, 0x0a	; 10
 2b8:	87 60       	ori	r24, 0x07	; 7
 2ba:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2bc:	90 e3       	ldi	r25, 0x30	; 48
 2be:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2c0:	8b b1       	in	r24, 0x0b	; 11
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	8b b9       	out	0x0b, r24	; 11
 2c6:	ef e9       	ldi	r30, 0x9F	; 159
 2c8:	ff e0       	ldi	r31, 0x0F	; 15
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCDinit+0x2e>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCDinit+0x34>
 2d0:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	8b 7f       	andi	r24, 0xFB	; 251
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	ef e9       	ldi	r30, 0x9F	; 159
 2da:	ff e0       	ldi	r31, 0x0F	; 15
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCDinit+0x40>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCDinit+0x46>
 2e2:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2e4:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	8b b9       	out	0x0b, r24	; 11
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDinit+0x54>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCDinit+0x5a>
 2f6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2f8:	8b b1       	in	r24, 0x0b	; 11
 2fa:	8b 7f       	andi	r24, 0xFB	; 251
 2fc:	8b b9       	out	0x0b, r24	; 11
 2fe:	ef e9       	ldi	r30, 0x9F	; 159
 300:	ff e0       	ldi	r31, 0x0F	; 15
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCDinit+0x66>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCDinit+0x6c>
 308:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	84 60       	ori	r24, 0x04	; 4
 312:	8b b9       	out	0x0b, r24	; 11
 314:	8f e9       	ldi	r24, 0x9F	; 159
 316:	9f e0       	ldi	r25, 0x0F	; 15
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDinit+0x7c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCDinit+0x82>
 31e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8b 7f       	andi	r24, 0xFB	; 251
 324:	8b b9       	out	0x0b, r24	; 11
 326:	ef e9       	ldi	r30, 0x9F	; 159
 328:	ff e0       	ldi	r31, 0x0F	; 15
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCDinit+0x8e>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCDinit+0x94>
 330:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 332:	88 e2       	ldi	r24, 0x28	; 40
 334:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	0e 94 cc 00 	call	0x198	; 0x198 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 342:	0a c0       	rjmp	.+20     	; 0x358 <LCDinit+0xbc>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 344:	d1 e0       	ldi	r29, 0x01	; 1
 346:	d6 0f       	add	r29, r22
 348:	8c 2f       	mov	r24, r28
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	88 59       	subi	r24, 0x98	; 152
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	0e 94 24 01 	call	0x248	; 0x248 <LCDdefinechar>
		ch=ch+8;
 354:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 356:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 358:	c0 34       	cpi	r28, 0x40	; 64
 35a:	a0 f3       	brcs	.-24     	; 0x344 <LCDinit+0xa8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <main>:
#include "main.h"


int main(void)
{
	LCDinit();
 362:	0e 94 4e 01 	call	0x29c	; 0x29c <LCDinit>
    SEOS_Init();
 366:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SEOS_Init>
	VENTILADOR_Init();
 36a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <VENTILADOR_Init>
	CALEFACTOR_Init();
 36e:	0e 94 8f 00 	call	0x11e	; 0x11e <CALEFACTOR_Init>
	SENSORTEMP_Init();
 372:	0e 94 c1 01 	call	0x382	; 0x382 <SENSORTEMP_Init>
	SYSTEM_Init();
 376:	0e 94 23 02 	call	0x446	; 0x446 <SYSTEM_Init>
	sei();
 37a:	78 94       	sei
    while (1)
    {
		SEOS_Dispatch_Tasks();
 37c:	0e 94 02 02 	call	0x404	; 0x404 <SEOS_Dispatch_Tasks>
 380:	fd cf       	rjmp	.-6      	; 0x37c <main+0x1a>

00000382 <SENSORTEMP_Init>:


tempType temperature;

void SENSORTEMP_Init(){
	temperature=24;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	a0 ec       	ldi	r26, 0xC0	; 192
 388:	b1 e4       	ldi	r27, 0x41	; 65
 38a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temperature>
 38e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temperature+0x1>
 392:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <temperature+0x2>
 396:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <temperature+0x3>
	ADC_Init();
 39a:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_Init>
 39e:	08 95       	ret

000003a0 <SENSORTEMP_MeasureTemp>:
	//toma el valor del registro del ADC
	//lo pasa a mV
	//calcula la Temperatura en °C
	//retorna el resultado en tempType
	
	unsigned long aux = ADC_GetData();
 3a0:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADC_GetData>
	temperature = aux * ADC_FACTOR; //consigo el voltaje de salida en mV
 3a4:	9c 01       	movw	r18, r24
 3a6:	a8 e8       	ldi	r26, 0x88	; 136
 3a8:	b3 e1       	ldi	r27, 0x13	; 19
 3aa:	0e 94 ad 04 	call	0x95a	; 0x95a <__umulhisi3>
 3ae:	05 2e       	mov	r0, r21
 3b0:	5a e0       	ldi	r21, 0x0A	; 10
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	77 95       	ror	r23
 3b8:	67 95       	ror	r22
 3ba:	5a 95       	dec	r21
 3bc:	d1 f7       	brne	.-12     	; 0x3b2 <SENSORTEMP_MeasureTemp+0x12>
 3be:	50 2d       	mov	r21, r0
 3c0:	0e 94 89 03 	call	0x712	; 0x712 <__floatunsisf>
	//equivalente a hacer (aux*5000UL)/1024
	temperature = temperature/SENSORTEMP_FACTOR; //consigo el valor de la temperatura
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	40 e2       	ldi	r20, 0x20	; 32
 3ca:	51 e4       	ldi	r21, 0x41	; 65
 3cc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divsf3>
 3d0:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <temperature>
 3d4:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <temperature+0x1>
 3d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temperature+0x2>
 3dc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <temperature+0x3>
	#if USING_FLOAT==1
	aux=temperature;
	temperature = ((temperature-aux>0.33) ? aux+0.5 : (temperature-aux>0.66) ? aux+1:aux);
	#endif
	return temperature;
 3e0:	08 95       	ret

000003e2 <SEOS_Init>:
static unsigned char iCont=0;


void SEOS_Init(){
	//configuro Timer1 para interrupciones cada 100ms	
	OCR1A = 6249;
 3e2:	89 e6       	ldi	r24, 0x69	; 105
 3e4:	98 e1       	ldi	r25, 0x18	; 24
 3e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00; //Seteo el timer1 en CTC mode
 3ee:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS12); //CTC mode, preescalador en N=256
 3f2:	8c e0       	ldi	r24, 0x0C	; 12
 3f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1<<OCIE1A); //Activo interrupciones de registro OCR01	
 3f8:	ef e6       	ldi	r30, 0x6F	; 111
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	82 60       	ori	r24, 0x02	; 2
 400:	80 83       	st	Z, r24
 402:	08 95       	ret

00000404 <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks(){
	
	if(FLAG_Sensor==1){ //Esto corre cada 500ms
 404:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <FLAG_Sensor>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	21 f4       	brne	.+8      	; 0x414 <SEOS_Dispatch_Tasks+0x10>
		SYSTEM_Update(); //toma la temp y actualiza el sistema
 40c:	0e 94 a0 02 	call	0x540	; 0x540 <SYSTEM_Update>
		FLAG_Sensor=0;
 410:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <FLAG_Sensor>
 414:	08 95       	ret

00000416 <__vector_11>:
	}
}

ISR(TIMER1_COMPA_vect){ //interrupción cada 100ms
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	8f 93       	push	r24
	if(++iCont==5){
 422:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 426:	8f 5f       	subi	r24, 0xFF	; 255
 428:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 42c:	85 30       	cpi	r24, 0x05	; 5
 42e:	29 f4       	brne	.+10     	; 0x43a <__vector_11+0x24>
		FLAG_Sensor=1;	
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <FLAG_Sensor>
		iCont=0;
 436:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
}
 43a:	8f 91       	pop	r24
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <SYSTEM_Init>:
static char texto[14] = "TEMP: 00.0 [C]";

void writeLCD(tempType temp);

void SYSTEM_Init(){
	LCDclr();
 446:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
 44a:	08 95       	ret

0000044c <writeLCD>:
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
}

void writeLCD(tempType temp){
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
	//texto -> "TEMP: xx.y °C"
	temp = temp*10;
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 e2       	ldi	r20, 0x20	; 32
 45a:	51 e4       	ldi	r21, 0x41	; 65
 45c:	0e 94 40 04 	call	0x880	; 0x880 <__mulsf3>
	texto[6] = '0' + ((unsigned short)temp/100) % 10;
 460:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fixunssfsi>
 464:	6b 01       	movw	r12, r22
 466:	7c 01       	movw	r14, r24
 468:	9b 01       	movw	r18, r22
 46a:	36 95       	lsr	r19
 46c:	27 95       	ror	r18
 46e:	36 95       	lsr	r19
 470:	27 95       	ror	r18
 472:	ab e7       	ldi	r26, 0x7B	; 123
 474:	b4 e1       	ldi	r27, 0x14	; 20
 476:	0e 94 ad 04 	call	0x95a	; 0x95a <__umulhisi3>
 47a:	ac 01       	movw	r20, r24
 47c:	56 95       	lsr	r21
 47e:	47 95       	ror	r20
 480:	9a 01       	movw	r18, r20
 482:	ad ec       	ldi	r26, 0xCD	; 205
 484:	bc ec       	ldi	r27, 0xCC	; 204
 486:	0e 94 ad 04 	call	0x95a	; 0x95a <__umulhisi3>
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	96 95       	lsr	r25
 494:	87 95       	ror	r24
 496:	9c 01       	movw	r18, r24
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	82 0f       	add	r24, r18
 4aa:	93 1f       	adc	r25, r19
 4ac:	9a 01       	movw	r18, r20
 4ae:	28 1b       	sub	r18, r24
 4b0:	39 0b       	sbc	r19, r25
 4b2:	c9 01       	movw	r24, r18
 4b4:	e0 e0       	ldi	r30, 0x00	; 0
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	80 5d       	subi	r24, 0xD0	; 208
 4ba:	86 83       	std	Z+6, r24	; 0x06
	texto[7] = '0' + ((unsigned short)temp/10)  % 10;
 4bc:	96 01       	movw	r18, r12
 4be:	0e 94 ad 04 	call	0x95a	; 0x95a <__umulhisi3>
 4c2:	ac 01       	movw	r20, r24
 4c4:	56 95       	lsr	r21
 4c6:	47 95       	ror	r20
 4c8:	56 95       	lsr	r21
 4ca:	47 95       	ror	r20
 4cc:	56 95       	lsr	r21
 4ce:	47 95       	ror	r20
 4d0:	9a 01       	movw	r18, r20
 4d2:	0e 94 ad 04 	call	0x95a	; 0x95a <__umulhisi3>
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	9c 01       	movw	r18, r24
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	82 0f       	add	r24, r18
 4f6:	93 1f       	adc	r25, r19
 4f8:	9a 01       	movw	r18, r20
 4fa:	28 1b       	sub	r18, r24
 4fc:	39 0b       	sbc	r19, r25
 4fe:	c9 01       	movw	r24, r18
 500:	80 5d       	subi	r24, 0xD0	; 208
 502:	87 83       	std	Z+7, r24	; 0x07
	texto[9] = '0' + (unsigned short)temp%10;
 504:	ca 01       	movw	r24, r20
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	44 0f       	add	r20, r20
 514:	55 1f       	adc	r21, r21
 516:	48 0f       	add	r20, r24
 518:	59 1f       	adc	r21, r25
 51a:	c6 01       	movw	r24, r12
 51c:	84 1b       	sub	r24, r20
 51e:	95 0b       	sbc	r25, r21
 520:	80 5d       	subi	r24, 0xD0	; 208
 522:	81 87       	std	Z+9, r24	; 0x09
	LCDGotoXY(0,0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 15 01 	call	0x22a	; 0x22a <LCDGotoXY>
	LCDstring(texto,14);
 52c:	6e e0       	ldi	r22, 0x0E	; 14
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDstring>
}
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	08 95       	ret

00000540 <SYSTEM_Update>:
}

//Toma la temperatura del sensor y la actualiza en el LCD
//Prende y apaga el calefactor en caso de ser necesario
void SYSTEM_Update(){
	temperatura = SENSORTEMP_MeasureTemp();
 540:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SENSORTEMP_MeasureTemp>
 544:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <temperatura>
 548:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <temperatura+0x1>
 54c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <temperatura+0x2>
 550:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temperatura+0x3>
	if(temperatura>MAX_T){
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	40 ec       	ldi	r20, 0xC0	; 192
 55a:	51 e4       	ldi	r21, 0x41	; 65
 55c:	0e 94 3b 04 	call	0x876	; 0x876 <__gesf2>
 560:	18 16       	cp	r1, r24
 562:	1c f4       	brge	.+6      	; 0x56a <SYSTEM_Update+0x2a>
		VENTILADOR_TurnOn();
 564:	0e 94 df 02 	call	0x5be	; 0x5be <VENTILADOR_TurnOn>
 568:	02 c0       	rjmp	.+4      	; 0x56e <SYSTEM_Update+0x2e>
	}
	else{
		VENTILADOR_TurnOff();
 56a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <VENTILADOR_TurnOff>
	}
	if(temperatura<MIN_T){
 56e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <temperatura>
 572:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <temperatura+0x1>
 576:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <temperatura+0x2>
 57a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <temperatura+0x3>
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	48 e8       	ldi	r20, 0x88	; 136
 584:	51 e4       	ldi	r21, 0x41	; 65
 586:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__cmpsf2>
 58a:	88 23       	and	r24, r24
 58c:	1c f4       	brge	.+6      	; 0x594 <SYSTEM_Update+0x54>
		CALEFACTOR_TurnOn();
 58e:	0e 94 97 00 	call	0x12e	; 0x12e <CALEFACTOR_TurnOn>
 592:	02 c0       	rjmp	.+4      	; 0x598 <SYSTEM_Update+0x58>
	}
	else{
		CALEFACTOR_TurnOff();
 594:	0e 94 93 00 	call	0x126	; 0x126 <CALEFACTOR_TurnOff>
	}
	//ESCRIBIR EN EL LCD LA TEMPERATURA
	writeLCD(temperatura);		
 598:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <temperatura>
 59c:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <temperatura+0x1>
 5a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <temperatura+0x2>
 5a4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <temperatura+0x3>
 5a8:	0e 94 26 02 	call	0x44c	; 0x44c <writeLCD>
 5ac:	08 95       	ret

000005ae <VENTILADOR_Init>:

#include "Ventilador.h"

void VENTILADOR_Init(){
	//setea pin pb0 como escritura
	DDRB |= (1<<PORTB0);
 5ae:	84 b1       	in	r24, 0x04	; 4
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	84 b9       	out	0x04, r24	; 4
 5b4:	08 95       	ret

000005b6 <VENTILADOR_TurnOff>:

}

void VENTILADOR_TurnOff(){
	//apaga el led conecatdo a pb0
	PORTB &= ~(1<<PORTB0);
 5b6:	85 b1       	in	r24, 0x05	; 5
 5b8:	8e 7f       	andi	r24, 0xFE	; 254
 5ba:	85 b9       	out	0x05, r24	; 5
 5bc:	08 95       	ret

000005be <VENTILADOR_TurnOn>:
}

void VENTILADOR_TurnOn(){
	//prende el led conectado a pb0
	PORTB |= (1<<PORTB0);
 5be:	85 b1       	in	r24, 0x05	; 5
 5c0:	81 60       	ori	r24, 0x01	; 1
 5c2:	85 b9       	out	0x05, r24	; 5
 5c4:	08 95       	ret

000005c6 <__cmpsf2>:
 5c6:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_cmp>
 5ca:	08 f4       	brcc	.+2      	; 0x5ce <__cmpsf2+0x8>
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	08 95       	ret

000005d0 <__divsf3>:
 5d0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__divsf3x>
 5d4:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_round>
 5d8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_pscB>
 5dc:	58 f0       	brcs	.+22     	; 0x5f4 <__divsf3+0x24>
 5de:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_pscA>
 5e2:	40 f0       	brcs	.+16     	; 0x5f4 <__divsf3+0x24>
 5e4:	29 f4       	brne	.+10     	; 0x5f0 <__divsf3+0x20>
 5e6:	5f 3f       	cpi	r21, 0xFF	; 255
 5e8:	29 f0       	breq	.+10     	; 0x5f4 <__divsf3+0x24>
 5ea:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 5ee:	51 11       	cpse	r21, r1
 5f0:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 5f4:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_nan>

000005f8 <__divsf3x>:
 5f8:	0e 94 12 04 	call	0x824	; 0x824 <__fp_split3>
 5fc:	68 f3       	brcs	.-38     	; 0x5d8 <__divsf3+0x8>

000005fe <__divsf3_pse>:
 5fe:	99 23       	and	r25, r25
 600:	b1 f3       	breq	.-20     	; 0x5ee <__divsf3+0x1e>
 602:	55 23       	and	r21, r21
 604:	91 f3       	breq	.-28     	; 0x5ea <__divsf3+0x1a>
 606:	95 1b       	sub	r25, r21
 608:	55 0b       	sbc	r21, r21
 60a:	bb 27       	eor	r27, r27
 60c:	aa 27       	eor	r26, r26
 60e:	62 17       	cp	r22, r18
 610:	73 07       	cpc	r23, r19
 612:	84 07       	cpc	r24, r20
 614:	38 f0       	brcs	.+14     	; 0x624 <__divsf3_pse+0x26>
 616:	9f 5f       	subi	r25, 0xFF	; 255
 618:	5f 4f       	sbci	r21, 0xFF	; 255
 61a:	22 0f       	add	r18, r18
 61c:	33 1f       	adc	r19, r19
 61e:	44 1f       	adc	r20, r20
 620:	aa 1f       	adc	r26, r26
 622:	a9 f3       	breq	.-22     	; 0x60e <__divsf3_pse+0x10>
 624:	35 d0       	rcall	.+106    	; 0x690 <__divsf3_pse+0x92>
 626:	0e 2e       	mov	r0, r30
 628:	3a f0       	brmi	.+14     	; 0x638 <__divsf3_pse+0x3a>
 62a:	e0 e8       	ldi	r30, 0x80	; 128
 62c:	32 d0       	rcall	.+100    	; 0x692 <__divsf3_pse+0x94>
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	50 40       	sbci	r21, 0x00	; 0
 632:	e6 95       	lsr	r30
 634:	00 1c       	adc	r0, r0
 636:	ca f7       	brpl	.-14     	; 0x62a <__divsf3_pse+0x2c>
 638:	2b d0       	rcall	.+86     	; 0x690 <__divsf3_pse+0x92>
 63a:	fe 2f       	mov	r31, r30
 63c:	29 d0       	rcall	.+82     	; 0x690 <__divsf3_pse+0x92>
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	bb 1f       	adc	r27, r27
 646:	26 17       	cp	r18, r22
 648:	37 07       	cpc	r19, r23
 64a:	48 07       	cpc	r20, r24
 64c:	ab 07       	cpc	r26, r27
 64e:	b0 e8       	ldi	r27, 0x80	; 128
 650:	09 f0       	breq	.+2      	; 0x654 <__divsf3_pse+0x56>
 652:	bb 0b       	sbc	r27, r27
 654:	80 2d       	mov	r24, r0
 656:	bf 01       	movw	r22, r30
 658:	ff 27       	eor	r31, r31
 65a:	93 58       	subi	r25, 0x83	; 131
 65c:	5f 4f       	sbci	r21, 0xFF	; 255
 65e:	3a f0       	brmi	.+14     	; 0x66e <__divsf3_pse+0x70>
 660:	9e 3f       	cpi	r25, 0xFE	; 254
 662:	51 05       	cpc	r21, r1
 664:	78 f0       	brcs	.+30     	; 0x684 <__divsf3_pse+0x86>
 666:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 66a:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	e4 f3       	brlt	.-8      	; 0x66a <__divsf3_pse+0x6c>
 672:	98 3e       	cpi	r25, 0xE8	; 232
 674:	d4 f3       	brlt	.-12     	; 0x66a <__divsf3_pse+0x6c>
 676:	86 95       	lsr	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b7 95       	ror	r27
 67e:	f7 95       	ror	r31
 680:	9f 5f       	subi	r25, 0xFF	; 255
 682:	c9 f7       	brne	.-14     	; 0x676 <__divsf3_pse+0x78>
 684:	88 0f       	add	r24, r24
 686:	91 1d       	adc	r25, r1
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret
 690:	e1 e0       	ldi	r30, 0x01	; 1
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	bb 1f       	adc	r27, r27
 69a:	62 17       	cp	r22, r18
 69c:	73 07       	cpc	r23, r19
 69e:	84 07       	cpc	r24, r20
 6a0:	ba 07       	cpc	r27, r26
 6a2:	20 f0       	brcs	.+8      	; 0x6ac <__divsf3_pse+0xae>
 6a4:	62 1b       	sub	r22, r18
 6a6:	73 0b       	sbc	r23, r19
 6a8:	84 0b       	sbc	r24, r20
 6aa:	ba 0b       	sbc	r27, r26
 6ac:	ee 1f       	adc	r30, r30
 6ae:	88 f7       	brcc	.-30     	; 0x692 <__divsf3_pse+0x94>
 6b0:	e0 95       	com	r30
 6b2:	08 95       	ret

000006b4 <__fixunssfsi>:
 6b4:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_splitA>
 6b8:	88 f0       	brcs	.+34     	; 0x6dc <__fixunssfsi+0x28>
 6ba:	9f 57       	subi	r25, 0x7F	; 127
 6bc:	98 f0       	brcs	.+38     	; 0x6e4 <__fixunssfsi+0x30>
 6be:	b9 2f       	mov	r27, r25
 6c0:	99 27       	eor	r25, r25
 6c2:	b7 51       	subi	r27, 0x17	; 23
 6c4:	b0 f0       	brcs	.+44     	; 0x6f2 <__fixunssfsi+0x3e>
 6c6:	e1 f0       	breq	.+56     	; 0x700 <__fixunssfsi+0x4c>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	1a f0       	brmi	.+6      	; 0x6d8 <__fixunssfsi+0x24>
 6d2:	ba 95       	dec	r27
 6d4:	c9 f7       	brne	.-14     	; 0x6c8 <__fixunssfsi+0x14>
 6d6:	14 c0       	rjmp	.+40     	; 0x700 <__fixunssfsi+0x4c>
 6d8:	b1 30       	cpi	r27, 0x01	; 1
 6da:	91 f0       	breq	.+36     	; 0x700 <__fixunssfsi+0x4c>
 6dc:	0e 94 34 04 	call	0x868	; 0x868 <__fp_zero>
 6e0:	b1 e0       	ldi	r27, 0x01	; 1
 6e2:	08 95       	ret
 6e4:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_zero>
 6e8:	67 2f       	mov	r22, r23
 6ea:	78 2f       	mov	r23, r24
 6ec:	88 27       	eor	r24, r24
 6ee:	b8 5f       	subi	r27, 0xF8	; 248
 6f0:	39 f0       	breq	.+14     	; 0x700 <__fixunssfsi+0x4c>
 6f2:	b9 3f       	cpi	r27, 0xF9	; 249
 6f4:	cc f3       	brlt	.-14     	; 0x6e8 <__fixunssfsi+0x34>
 6f6:	86 95       	lsr	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b3 95       	inc	r27
 6fe:	d9 f7       	brne	.-10     	; 0x6f6 <__fixunssfsi+0x42>
 700:	3e f4       	brtc	.+14     	; 0x710 <__fixunssfsi+0x5c>
 702:	90 95       	com	r25
 704:	80 95       	com	r24
 706:	70 95       	com	r23
 708:	61 95       	neg	r22
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	8f 4f       	sbci	r24, 0xFF	; 255
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	08 95       	ret

00000712 <__floatunsisf>:
 712:	e8 94       	clt
 714:	09 c0       	rjmp	.+18     	; 0x728 <__floatsisf+0x12>

00000716 <__floatsisf>:
 716:	97 fb       	bst	r25, 7
 718:	3e f4       	brtc	.+14     	; 0x728 <__floatsisf+0x12>
 71a:	90 95       	com	r25
 71c:	80 95       	com	r24
 71e:	70 95       	com	r23
 720:	61 95       	neg	r22
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	99 23       	and	r25, r25
 72a:	a9 f0       	breq	.+42     	; 0x756 <__floatsisf+0x40>
 72c:	f9 2f       	mov	r31, r25
 72e:	96 e9       	ldi	r25, 0x96	; 150
 730:	bb 27       	eor	r27, r27
 732:	93 95       	inc	r25
 734:	f6 95       	lsr	r31
 736:	87 95       	ror	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b7 95       	ror	r27
 73e:	f1 11       	cpse	r31, r1
 740:	f8 cf       	rjmp	.-16     	; 0x732 <__floatsisf+0x1c>
 742:	fa f4       	brpl	.+62     	; 0x782 <__floatsisf+0x6c>
 744:	bb 0f       	add	r27, r27
 746:	11 f4       	brne	.+4      	; 0x74c <__floatsisf+0x36>
 748:	60 ff       	sbrs	r22, 0
 74a:	1b c0       	rjmp	.+54     	; 0x782 <__floatsisf+0x6c>
 74c:	6f 5f       	subi	r22, 0xFF	; 255
 74e:	7f 4f       	sbci	r23, 0xFF	; 255
 750:	8f 4f       	sbci	r24, 0xFF	; 255
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	16 c0       	rjmp	.+44     	; 0x782 <__floatsisf+0x6c>
 756:	88 23       	and	r24, r24
 758:	11 f0       	breq	.+4      	; 0x75e <__floatsisf+0x48>
 75a:	96 e9       	ldi	r25, 0x96	; 150
 75c:	11 c0       	rjmp	.+34     	; 0x780 <__floatsisf+0x6a>
 75e:	77 23       	and	r23, r23
 760:	21 f0       	breq	.+8      	; 0x76a <__floatsisf+0x54>
 762:	9e e8       	ldi	r25, 0x8E	; 142
 764:	87 2f       	mov	r24, r23
 766:	76 2f       	mov	r23, r22
 768:	05 c0       	rjmp	.+10     	; 0x774 <__floatsisf+0x5e>
 76a:	66 23       	and	r22, r22
 76c:	71 f0       	breq	.+28     	; 0x78a <__floatsisf+0x74>
 76e:	96 e8       	ldi	r25, 0x86	; 134
 770:	86 2f       	mov	r24, r22
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	2a f0       	brmi	.+10     	; 0x782 <__floatsisf+0x6c>
 778:	9a 95       	dec	r25
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	da f7       	brpl	.-10     	; 0x778 <__floatsisf+0x62>
 782:	88 0f       	add	r24, r24
 784:	96 95       	lsr	r25
 786:	87 95       	ror	r24
 788:	97 f9       	bld	r25, 7
 78a:	08 95       	ret

0000078c <__fp_cmp>:
 78c:	99 0f       	add	r25, r25
 78e:	00 08       	sbc	r0, r0
 790:	55 0f       	add	r21, r21
 792:	aa 0b       	sbc	r26, r26
 794:	e0 e8       	ldi	r30, 0x80	; 128
 796:	fe ef       	ldi	r31, 0xFE	; 254
 798:	16 16       	cp	r1, r22
 79a:	17 06       	cpc	r1, r23
 79c:	e8 07       	cpc	r30, r24
 79e:	f9 07       	cpc	r31, r25
 7a0:	c0 f0       	brcs	.+48     	; 0x7d2 <__fp_cmp+0x46>
 7a2:	12 16       	cp	r1, r18
 7a4:	13 06       	cpc	r1, r19
 7a6:	e4 07       	cpc	r30, r20
 7a8:	f5 07       	cpc	r31, r21
 7aa:	98 f0       	brcs	.+38     	; 0x7d2 <__fp_cmp+0x46>
 7ac:	62 1b       	sub	r22, r18
 7ae:	73 0b       	sbc	r23, r19
 7b0:	84 0b       	sbc	r24, r20
 7b2:	95 0b       	sbc	r25, r21
 7b4:	39 f4       	brne	.+14     	; 0x7c4 <__fp_cmp+0x38>
 7b6:	0a 26       	eor	r0, r26
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <__fp_cmp+0x46>
 7ba:	23 2b       	or	r18, r19
 7bc:	24 2b       	or	r18, r20
 7be:	25 2b       	or	r18, r21
 7c0:	21 f4       	brne	.+8      	; 0x7ca <__fp_cmp+0x3e>
 7c2:	08 95       	ret
 7c4:	0a 26       	eor	r0, r26
 7c6:	09 f4       	brne	.+2      	; 0x7ca <__fp_cmp+0x3e>
 7c8:	a1 40       	sbci	r26, 0x01	; 1
 7ca:	a6 95       	lsr	r26
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	81 1d       	adc	r24, r1
 7d0:	81 1d       	adc	r24, r1
 7d2:	08 95       	ret

000007d4 <__fp_inf>:
 7d4:	97 f9       	bld	r25, 7
 7d6:	9f 67       	ori	r25, 0x7F	; 127
 7d8:	80 e8       	ldi	r24, 0x80	; 128
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	08 95       	ret

000007e0 <__fp_nan>:
 7e0:	9f ef       	ldi	r25, 0xFF	; 255
 7e2:	80 ec       	ldi	r24, 0xC0	; 192
 7e4:	08 95       	ret

000007e6 <__fp_pscA>:
 7e6:	00 24       	eor	r0, r0
 7e8:	0a 94       	dec	r0
 7ea:	16 16       	cp	r1, r22
 7ec:	17 06       	cpc	r1, r23
 7ee:	18 06       	cpc	r1, r24
 7f0:	09 06       	cpc	r0, r25
 7f2:	08 95       	ret

000007f4 <__fp_pscB>:
 7f4:	00 24       	eor	r0, r0
 7f6:	0a 94       	dec	r0
 7f8:	12 16       	cp	r1, r18
 7fa:	13 06       	cpc	r1, r19
 7fc:	14 06       	cpc	r1, r20
 7fe:	05 06       	cpc	r0, r21
 800:	08 95       	ret

00000802 <__fp_round>:
 802:	09 2e       	mov	r0, r25
 804:	03 94       	inc	r0
 806:	00 0c       	add	r0, r0
 808:	11 f4       	brne	.+4      	; 0x80e <__fp_round+0xc>
 80a:	88 23       	and	r24, r24
 80c:	52 f0       	brmi	.+20     	; 0x822 <__fp_round+0x20>
 80e:	bb 0f       	add	r27, r27
 810:	40 f4       	brcc	.+16     	; 0x822 <__fp_round+0x20>
 812:	bf 2b       	or	r27, r31
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0x18>
 816:	60 ff       	sbrs	r22, 0
 818:	04 c0       	rjmp	.+8      	; 0x822 <__fp_round+0x20>
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	08 95       	ret

00000824 <__fp_split3>:
 824:	57 fd       	sbrc	r21, 7
 826:	90 58       	subi	r25, 0x80	; 128
 828:	44 0f       	add	r20, r20
 82a:	55 1f       	adc	r21, r21
 82c:	59 f0       	breq	.+22     	; 0x844 <__fp_splitA+0x10>
 82e:	5f 3f       	cpi	r21, 0xFF	; 255
 830:	71 f0       	breq	.+28     	; 0x84e <__fp_splitA+0x1a>
 832:	47 95       	ror	r20

00000834 <__fp_splitA>:
 834:	88 0f       	add	r24, r24
 836:	97 fb       	bst	r25, 7
 838:	99 1f       	adc	r25, r25
 83a:	61 f0       	breq	.+24     	; 0x854 <__fp_splitA+0x20>
 83c:	9f 3f       	cpi	r25, 0xFF	; 255
 83e:	79 f0       	breq	.+30     	; 0x85e <__fp_splitA+0x2a>
 840:	87 95       	ror	r24
 842:	08 95       	ret
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	14 06       	cpc	r1, r20
 84a:	55 1f       	adc	r21, r21
 84c:	f2 cf       	rjmp	.-28     	; 0x832 <__fp_split3+0xe>
 84e:	46 95       	lsr	r20
 850:	f1 df       	rcall	.-30     	; 0x834 <__fp_splitA>
 852:	08 c0       	rjmp	.+16     	; 0x864 <__fp_splitA+0x30>
 854:	16 16       	cp	r1, r22
 856:	17 06       	cpc	r1, r23
 858:	18 06       	cpc	r1, r24
 85a:	99 1f       	adc	r25, r25
 85c:	f1 cf       	rjmp	.-30     	; 0x840 <__fp_splitA+0xc>
 85e:	86 95       	lsr	r24
 860:	71 05       	cpc	r23, r1
 862:	61 05       	cpc	r22, r1
 864:	08 94       	sec
 866:	08 95       	ret

00000868 <__fp_zero>:
 868:	e8 94       	clt

0000086a <__fp_szero>:
 86a:	bb 27       	eor	r27, r27
 86c:	66 27       	eor	r22, r22
 86e:	77 27       	eor	r23, r23
 870:	cb 01       	movw	r24, r22
 872:	97 f9       	bld	r25, 7
 874:	08 95       	ret

00000876 <__gesf2>:
 876:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_cmp>
 87a:	08 f4       	brcc	.+2      	; 0x87e <__gesf2+0x8>
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	08 95       	ret

00000880 <__mulsf3>:
 880:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__mulsf3x>
 884:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_round>
 888:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_pscA>
 88c:	38 f0       	brcs	.+14     	; 0x89c <__mulsf3+0x1c>
 88e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_pscB>
 892:	20 f0       	brcs	.+8      	; 0x89c <__mulsf3+0x1c>
 894:	95 23       	and	r25, r21
 896:	11 f0       	breq	.+4      	; 0x89c <__mulsf3+0x1c>
 898:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 89c:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_nan>
 8a0:	11 24       	eor	r1, r1
 8a2:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>

000008a6 <__mulsf3x>:
 8a6:	0e 94 12 04 	call	0x824	; 0x824 <__fp_split3>
 8aa:	70 f3       	brcs	.-36     	; 0x888 <__mulsf3+0x8>

000008ac <__mulsf3_pse>:
 8ac:	95 9f       	mul	r25, r21
 8ae:	c1 f3       	breq	.-16     	; 0x8a0 <__mulsf3+0x20>
 8b0:	95 0f       	add	r25, r21
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	55 1f       	adc	r21, r21
 8b6:	62 9f       	mul	r22, r18
 8b8:	f0 01       	movw	r30, r0
 8ba:	72 9f       	mul	r23, r18
 8bc:	bb 27       	eor	r27, r27
 8be:	f0 0d       	add	r31, r0
 8c0:	b1 1d       	adc	r27, r1
 8c2:	63 9f       	mul	r22, r19
 8c4:	aa 27       	eor	r26, r26
 8c6:	f0 0d       	add	r31, r0
 8c8:	b1 1d       	adc	r27, r1
 8ca:	aa 1f       	adc	r26, r26
 8cc:	64 9f       	mul	r22, r20
 8ce:	66 27       	eor	r22, r22
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	66 1f       	adc	r22, r22
 8d6:	82 9f       	mul	r24, r18
 8d8:	22 27       	eor	r18, r18
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	62 1f       	adc	r22, r18
 8e0:	73 9f       	mul	r23, r19
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	62 1f       	adc	r22, r18
 8e8:	83 9f       	mul	r24, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	22 1f       	adc	r18, r18
 8f0:	74 9f       	mul	r23, r20
 8f2:	33 27       	eor	r19, r19
 8f4:	a0 0d       	add	r26, r0
 8f6:	61 1d       	adc	r22, r1
 8f8:	23 1f       	adc	r18, r19
 8fa:	84 9f       	mul	r24, r20
 8fc:	60 0d       	add	r22, r0
 8fe:	21 1d       	adc	r18, r1
 900:	82 2f       	mov	r24, r18
 902:	76 2f       	mov	r23, r22
 904:	6a 2f       	mov	r22, r26
 906:	11 24       	eor	r1, r1
 908:	9f 57       	subi	r25, 0x7F	; 127
 90a:	50 40       	sbci	r21, 0x00	; 0
 90c:	9a f0       	brmi	.+38     	; 0x934 <__stack+0x35>
 90e:	f1 f0       	breq	.+60     	; 0x94c <__stack+0x4d>
 910:	88 23       	and	r24, r24
 912:	4a f0       	brmi	.+18     	; 0x926 <__stack+0x27>
 914:	ee 0f       	add	r30, r30
 916:	ff 1f       	adc	r31, r31
 918:	bb 1f       	adc	r27, r27
 91a:	66 1f       	adc	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	91 50       	subi	r25, 0x01	; 1
 922:	50 40       	sbci	r21, 0x00	; 0
 924:	a9 f7       	brne	.-22     	; 0x910 <__stack+0x11>
 926:	9e 3f       	cpi	r25, 0xFE	; 254
 928:	51 05       	cpc	r21, r1
 92a:	80 f0       	brcs	.+32     	; 0x94c <__stack+0x4d>
 92c:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 930:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	e4 f3       	brlt	.-8      	; 0x930 <__stack+0x31>
 938:	98 3e       	cpi	r25, 0xE8	; 232
 93a:	d4 f3       	brlt	.-12     	; 0x930 <__stack+0x31>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	f7 95       	ror	r31
 946:	e7 95       	ror	r30
 948:	9f 5f       	subi	r25, 0xFF	; 255
 94a:	c1 f7       	brne	.-16     	; 0x93c <__stack+0x3d>
 94c:	fe 2b       	or	r31, r30
 94e:	88 0f       	add	r24, r24
 950:	91 1d       	adc	r25, r1
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__umulhisi3>:
 95a:	a2 9f       	mul	r26, r18
 95c:	b0 01       	movw	r22, r0
 95e:	b3 9f       	mul	r27, r19
 960:	c0 01       	movw	r24, r0
 962:	a3 9f       	mul	r26, r19
 964:	70 0d       	add	r23, r0
 966:	81 1d       	adc	r24, r1
 968:	11 24       	eor	r1, r1
 96a:	91 1d       	adc	r25, r1
 96c:	b2 9f       	mul	r27, r18
 96e:	70 0d       	add	r23, r0
 970:	81 1d       	adc	r24, r1
 972:	11 24       	eor	r1, r1
 974:	91 1d       	adc	r25, r1
 976:	08 95       	ret

00000978 <_exit>:
 978:	f8 94       	cli

0000097a <__stop_program>:
 97a:	ff cf       	rjmp	.-2      	; 0x97a <__stop_program>
